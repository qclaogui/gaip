syntax = "proto3";

package qclaogui.routeguide.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";

option go_package = "github.com/qclaogui/gaip/genproto/routeguide/apiv1/routeguidepb";

// Interface exported by the server.
service RouteGuideService {
  // This service is meant to only run locally on the port 9095
  option (google.api.default_host) = "localhost:9095";
  // See https://github.com/aip-dev/google.aip.dev/pull/1331
  option (google.api.api_version) = "v1_20241015";

  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  rpc GetFeature(GetFeatureRequest) returns (GetFeatureResponse) {
    option (google.api.http) = {
      post: "/v1beta1/routeguide:get-feature"
      body: "*"
    };
  }

  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  rpc ListFeatures(ListFeaturesRequest) returns (stream ListFeaturesResponse) {
    option (google.api.http) = {
      post: "/v1beta1/routeguide:list-feature"
      body: "*"
    };

    option (google.api.method_signature) = "feature,error";
  }

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  rpc RecordRoute(stream RecordRouteRequest) returns (RecordRouteResponse) {
    option (google.api.http) = {
      post: "/v1beta1/routeguide:record-route"
      body: "*"
    };
  }

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of RouteChatRequest sent while a route is being traversed,
  // while receiving other RouteChatResponse (e.g. from other users).
  rpc RouteChat(stream RouteChatRequest) returns (stream RouteChatResponse) {}
}

message GetFeatureRequest {
  Point point = 1;
}

message GetFeatureResponse {
  Feature feature = 1;
}

message ListFeaturesRequest {
  Rectangle rectangle = 1;
}

message ListFeaturesResponse {
  Feature feature = 1;
}

message RecordRouteRequest {
  Point point = 1;
}

message RecordRouteResponse {
  RouteSummary route_summary = 1;
}

// A message sent while at a given point.
message RouteChatRequest {
  RouteNote route_note = 1;
}

// A message response at a given point.
message RouteChatResponse {
  RouteNote route_note = 1;
}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Rectangle {
  // One corner of the rectangle.
  Point lo = 1;

  // The other corner of the rectangle.
  Point hi = 2;
}

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
message Feature {
  // The name of the feature.
  string name = 1;

  // The point where the feature is detected.
  Point location = 2;
}

// A RouteNote is a message sent while at a given point.
message RouteNote {
  // The location from which the message is sent.
  Point location = 1;

  // The message to be sent.
  string message = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  // The number of points received.
  int32 point_count = 1;

  // The number of known features passed while traversing the route.
  int32 feature_count = 2;

  // The distance covered in metres.
  int32 distance = 3;

  // The duration of the traversal in seconds.
  int32 elapsed_time = 4;
}
