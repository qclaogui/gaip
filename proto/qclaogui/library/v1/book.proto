syntax = "proto3";

package qclaogui.library.v1;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/qclaogui/golang-api-server/genproto/library/apiv1/librarypb";

// A single book in the library.
message Book {
  option (google.api.resource) = {
    type: "library.qclaogui.com/Book"
    pattern: "shelves/{shelf}/books/{book_id}"
  };

  // The resource name of the book.
  // Book names have the form `shelves/{shelf_id}/books/{book_id}`.
  // The name is ignored when creating a book.
  string name = 1;

  // The name of the book author.
  string author = 2;

  // The title of the book.
  string title = 3;

  // Value indicating whether the book has been read.
  bool read = 4;
}

// Request message for LibraryService.CreateBook.
message CreateBookRequest {
  // The name of the shelf in the form of `shelves/[shelf_id]`
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "library.qclaogui.com/Shelf"
  ];

  // The book to create.
  Book book = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for LibraryService.GetBook.
message GetBookRequest {
  // The name of the book in the form of `shelves/[shelf_id]/books/[book_id]`.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "library.qclaogui.com/Book"
  ];
}

// Request message for LibraryService.ListBooks.
message ListBooksRequest {
  // The name of the shelf whose books we'd like to list.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "library.qclaogui.com/Shelf"
  ];

  // The filter expression.
  string filter = 2;

  // Number of books to return in the list. Must be positive. Max allowed page
  // size is 1000. If not specified, page size defaults to 20.
  int32 page_size = 3;

  // A token identifying a page of results the server should return.
  // Typically, this is the value of
  // [ListBooksResponse.next_page_token][qclaogui.library.v1.ListBooksResponse.next_page_token].
  // returned from the previous call to `ListBooks` method.
  string page_token = 4;
}

// Response message for LibraryService.ListBooks.
message ListBooksResponse {
  // The list of books.
  repeated Book books = 1;

  // A token to retrieve next page of results.
  // Pass this value in the
  // [ListBooksRequest.page_token][qclaogui.library.v1.ListBooksRequest.page_token]
  // field in the subsequent call to `ListBooks` method to retrieve the next
  // page of results.
  string next_page_token = 2;
}

// Request message for LibraryService.DeleteBook.
message DeleteBookRequest {
  // The name of the book in the form of `shelves/[shelf_id]/books/[book_id]`.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "library.qclaogui.com/Book"
  ];
}

// Request message for LibraryService.UpdateBook.
message UpdateBookRequest {
  // The name of the book to update.
  Book book = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. Mask of fields to update.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

// Describes what book to move (name) and what shelf we're moving it
// to (other_shelf_name).
message MoveBookRequest {
  // The name of the book to move.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "library.qclaogui.com/Book"
  ];

  // The name of the destination shelf.
  string other_shelf_name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "library.qclaogui.com/Shelf"
  ];
}
