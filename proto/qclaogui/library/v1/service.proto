syntax = "proto3";

package qclaogui.library.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/empty.proto";
import "qclaogui/library/v1/book.proto";
import "qclaogui/library/v1/shelf.proto";

option go_package = "github.com/qclaogui/golang-api-server/genproto/library/apiv1/librarypb";

// This API represents a simple digital library. It lets you manage Shelf
// resources and Book resources in the library. It defines the following
// resource model:
//
// - The API has a collection of [Shelf][qclaogui.library.v1.Shelf]
//   resources, named `shelves/*`
//
// - Each Shelf has a collection of [Book][qclaogui.library.v1.Book]
//   resources, named `shelves/*/books/*`
service LibraryService {
  option (google.api.default_host) = "library.qclaogui.com";

  // Creates a shelf, and returns the new Shelf.
  rpc CreateShelf(CreateShelfRequest) returns (Shelf) {
    option (google.api.http) = {
      post: "/v1/shelves"
      body: "shelf"
    };

    option (google.api.method_signature) = "shelf";
  }

  // Gets a shelf. Returns NOT_FOUND if the shelf does not exist.
  rpc GetShelf(GetShelfRequest) returns (Shelf) {
    option (google.api.http) = {get: "/v1/{name=shelves/*}"};

    option (google.api.method_signature) = "name";
  }

  // Lists shelves. The order is unspecified but deterministic. Newly created
  // shelves will not necessarily be added to the end of this list.
  rpc ListShelves(ListShelvesRequest) returns (ListShelvesResponse) {
    option (google.api.http) = {get: "/v1/shelves"};
  }

  // Deletes a shelf. Returns NOT_FOUND if the shelf does not exist.
  rpc DeleteShelf(DeleteShelfRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=shelves/*}"};

    option (google.api.method_signature) = "name";
  }

  // Merges two shelves by adding all books from the shelf named
  // `other_shelf_name` to shelf `name`, and deletes
  // `other_shelf_name`. Returns the updated shelf.
  // The book ids of the moved books may not be the same as the original books.
  //
  // Returns NOT_FOUND if either shelf does not exist.
  // This call is a no-op if the specified shelves are the same.
  rpc MergeShelves(MergeShelvesRequest) returns (Shelf) {
    option (google.api.http) = {
      post: "/v1/{name=shelves/*}:merge"
      body: "*"
    };

    option (google.api.method_signature) = "name,other_shelf";
  }

  // Creates a book, and returns the new Book.
  rpc CreateBook(CreateBookRequest) returns (Book) {
    option (google.api.http) = {
      post: "/v1/{parent=shelves/*}/books"
      body: "book"
    };

    option (google.api.method_signature) = "parent,book";
  }

  // Gets a book. Returns NOT_FOUND if the book does not exist.
  rpc GetBook(GetBookRequest) returns (Book) {
    option (google.api.http) = {get: "/v1/{name=shelves/*/books/*}"};

    option (google.api.method_signature) = "name";
  }

  // Lists books in a shelf. The order is unspecified but deterministic. Newly
  // created books will not necessarily be added to the end of this list.
  // Returns NOT_FOUND if the shelf does not exist.
  rpc ListBooks(ListBooksRequest) returns (ListBooksResponse) {
    option (google.api.http) = {get: "/v1/{parent=shelves/*}/books"};

    option (google.api.method_signature) = "parent";
  }

  // Deletes a book. Returns NOT_FOUND if the book does not exist.
  rpc DeleteBook(DeleteBookRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=shelves/*/books/*}"};

    option (google.api.method_signature) = "name";
  }

  // Updates a book. Returns INVALID_ARGUMENT if the name of the book
  // is non-empty and does not equal the existing name.
  rpc UpdateBook(UpdateBookRequest) returns (Book) {
    option (google.api.http) = {
      patch: "/v1/{book.name=shelves/*/books/*}"
      body: "*"
    };

    option (google.api.method_signature) = "book,update_mask";
  }

  // Moves a book to another shelf, and returns the new book. The book
  // id of the new book may not be the same as the original book.
  rpc MoveBook(MoveBookRequest) returns (Book) {
    option (google.api.http) = {
      post: "/v1/{name=shelves/*/books/*}:move"
      body: "*"
    };

    option (google.api.method_signature) = "name,other_shelf_name";
  }
}
