// (-- api-linter: core::0191::java-package=disabled
// (-- api-linter: core::0191::java-multiple-files=disabled
// (-- api-linter: core::0191::java-outer-classname=disabled
//     aip.dev/not-precedent: We need to do this because reasons. --)
syntax = "proto3";

package qclaogui.project.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/routing.proto";
import "google/longrunning/operations.proto";
import "qclaogui/project/v1/echo.proto";

option go_package = "github.com/qclaogui/gaip/genproto/project/apiv1/projectpb";

// This service is used showcase the four main types of rpcs - unary, server
// side streaming, client side streaming, and bidirectional streaming. This
// service also exposes methods that explicitly implement server delay, and
// paginated calls. Set the 'showcase-trailer' metadata key on any method
// to have the values echoed in the response trailers. Set the
// 'x-goog-request-params' metadata key on any method to have the values
// echoed in the response headers.
service EchoService {
  option (google.api.default_host) = "localhost:9095";

  // This method simply echoes the request. This method showcases unary RPCs.
  rpc Echo(EchoRequest) returns (EchoResponse) {
    option (google.api.http) = {
      post: "/v1/echo:echo"
      body: "*"
    };

    option (google.api.routing) = {
      routing_parameters {field: "header"}

      routing_parameters {
        field: "header"
        path_template: "{routing_id=**}"
      }

      routing_parameters {
        field: "header"
        path_template: "{table_name=regions/*/zones/*/**}"
      }
      routing_parameters {
        field: "header"
        path_template: "{super_id=projects/*}/**"
      }
      routing_parameters {
        field: "header"
        path_template: "{table_name=projects/*/instances/*/**}"
      }
      routing_parameters {
        field: "header"
        path_template: "projects/*/{instance_id=instances/*}/**"
      }

      routing_parameters {
        field: "other_header"
        path_template: "{baz=**}"
      }
      routing_parameters {
        field: "other_header"
        path_template: "{qux=projects/*}/**"
      }
    };
  }

  // This method returns error details in a repeated "google.protobuf.Any"
  // field. This method showcases handling errors thus encoded, particularly
  // over REST transport. Note that GAPICs only allow the type
  // "google.protobuf.Any" for field paths ending in "error.details", and, at
  // run-time, the actual types for these fields must be one of the types in
  // google/rpc/error_details.proto.
  rpc EchoErrorDetails(EchoErrorDetailsRequest) returns (EchoErrorDetailsResponse) {
    option (google.api.http) = {
      post: "/v1/echo:error-details"
      body: "*"
    };
  }

  // This method splits the given content into words and will pass each word back
  // through the stream. This method showcases server-side streaming RPCs.
  rpc Expand(ExpandRequest) returns (stream EchoResponse) {
    option (google.api.http) = {
      post: "/v1/echo:expand"
      body: "*"
    };

    option (google.api.method_signature) = "content,error";
  }

  // This method will collect the words given to it. When the stream is closed
  // by the client, this method will return the a concatenation of the strings
  // passed to it. This method showcases client-side streaming RPCs.
  rpc Collect(stream EchoRequest) returns (EchoResponse) {
    option (google.api.http) = {
      post: "/v1/echo:collect"
      body: "*"
    };
  }

  // This method, upon receiving a request on the stream, will pass the same
  // content back on the stream. This method showcases bidirectional
  // streaming RPCs.
  rpc Chat(stream EchoRequest) returns (stream EchoResponse);

  // This is similar to the Expand method but instead of returning a stream of
  // expanded words, this method returns a paged list of expanded words.
  rpc PagedExpand(PagedExpandRequest) returns (PagedExpandResponse) {
    option (google.api.http) = {
      post: "/v1/echo:pagedExpand"
      body: "*"
    };
  }

  // This method will wait for the requested amount of time and then return.
  // This method showcases how a client handles a request timeout.
  rpc Wait(WaitRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/echo:wait"
      body: "*"
    };

    option (google.longrunning.operation_info) = {
      response_type: "WaitResponse"
      metadata_type: "WaitMetadata"
    };
  }

  // This method will block (wait) for the requested amount of time
  // and then return the response or error.
  // This method showcases how a client handles delays or retries.
  rpc Block(BlockRequest) returns (BlockResponse) {
    option (google.api.http) = {
      post: "/v1/echo:block"
      body: "*"
    };
  }
}
