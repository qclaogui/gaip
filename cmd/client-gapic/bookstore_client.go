// Copyright Â© Weifeng Wang <qclaogui@gmail.com>
//
// Licensed under the Apache License 2.0.

// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package clientgapic

import (
	"context"
	"math"

	gax "github.com/googleapis/gax-go/v2"
	bookstorev1alpha1pb "github.com/qclaogui/golang-api-server/api/gen/proto/bookstore/v1alpha1"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

var newBookstoreClientHook clientHook

// BookstoreCallOptions contains the retry settings for each method of BookstoreClient.
type BookstoreCallOptions struct {
	ListShelves []gax.CallOption
	CreateShelf []gax.CallOption
	GetShelf    []gax.CallOption
	DeleteShelf []gax.CallOption
	ListBooks   []gax.CallOption
	CreateBook  []gax.CallOption
	GetBook     []gax.CallOption
	DeleteBook  []gax.CallOption
}

func defaultBookstoreGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint(":443"),
		internaloption.WithDefaultMTLSEndpoint(":443"),
		internaloption.WithDefaultAudience("https://"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultBookstoreCallOptions() *BookstoreCallOptions {
	return &BookstoreCallOptions{
		ListShelves: []gax.CallOption{},
		CreateShelf: []gax.CallOption{},
		GetShelf:    []gax.CallOption{},
		DeleteShelf: []gax.CallOption{},
		ListBooks:   []gax.CallOption{},
		CreateBook:  []gax.CallOption{},
		GetBook:     []gax.CallOption{},
		DeleteBook:  []gax.CallOption{},
	}
}

// internalBookstoreClient is an interface that defines the methods available from .
type internalBookstoreClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	ListShelves(context.Context, *emptypb.Empty, ...gax.CallOption) (*bookstorev1alpha1pb.ListShelvesResponse, error)
	CreateShelf(context.Context, *bookstorev1alpha1pb.CreateShelfRequest, ...gax.CallOption) (*bookstorev1alpha1pb.Shelf, error)
	GetShelf(context.Context, *bookstorev1alpha1pb.GetShelfRequest, ...gax.CallOption) (*bookstorev1alpha1pb.Shelf, error)
	DeleteShelf(context.Context, *bookstorev1alpha1pb.DeleteShelfRequest, ...gax.CallOption) error
	ListBooks(context.Context, *bookstorev1alpha1pb.ListBooksRequest, ...gax.CallOption) (*bookstorev1alpha1pb.ListBooksResponse, error)
	CreateBook(context.Context, *bookstorev1alpha1pb.CreateBookRequest, ...gax.CallOption) (*bookstorev1alpha1pb.Book, error)
	GetBook(context.Context, *bookstorev1alpha1pb.GetBookRequest, ...gax.CallOption) (*bookstorev1alpha1pb.Book, error)
	DeleteBook(context.Context, *bookstorev1alpha1pb.DeleteBookRequest, ...gax.CallOption) error
}

// BookstoreClient is a client for interacting with .
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// A simple Bookstore API.
//
// The API manages shelves and books resources. Shelves contain books.
type BookstoreClient struct {
	// The internal transport-dependent client.
	internalClient internalBookstoreClient

	// The call options for this service.
	CallOptions *BookstoreCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *BookstoreClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *BookstoreClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *BookstoreClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// ListShelves returns a list of all shelves in the bookstore.
func (c *BookstoreClient) ListShelves(ctx context.Context, req *emptypb.Empty, opts ...gax.CallOption) (*bookstorev1alpha1pb.ListShelvesResponse, error) {
	return c.internalClient.ListShelves(ctx, req, opts...)
}

// CreateShelf creates a new shelf in the bookstore.
func (c *BookstoreClient) CreateShelf(ctx context.Context, req *bookstorev1alpha1pb.CreateShelfRequest, opts ...gax.CallOption) (*bookstorev1alpha1pb.Shelf, error) {
	return c.internalClient.CreateShelf(ctx, req, opts...)
}

// GetShelf returns a specific bookstore shelf.
func (c *BookstoreClient) GetShelf(ctx context.Context, req *bookstorev1alpha1pb.GetShelfRequest, opts ...gax.CallOption) (*bookstorev1alpha1pb.Shelf, error) {
	return c.internalClient.GetShelf(ctx, req, opts...)
}

// DeleteShelf deletes a shelf, including all books that are stored on the shelf.
func (c *BookstoreClient) DeleteShelf(ctx context.Context, req *bookstorev1alpha1pb.DeleteShelfRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteShelf(ctx, req, opts...)
}

// ListBooks returns a list of books on a shelf.
func (c *BookstoreClient) ListBooks(ctx context.Context, req *bookstorev1alpha1pb.ListBooksRequest, opts ...gax.CallOption) (*bookstorev1alpha1pb.ListBooksResponse, error) {
	return c.internalClient.ListBooks(ctx, req, opts...)
}

// CreateBook creates a new book.
func (c *BookstoreClient) CreateBook(ctx context.Context, req *bookstorev1alpha1pb.CreateBookRequest, opts ...gax.CallOption) (*bookstorev1alpha1pb.Book, error) {
	return c.internalClient.CreateBook(ctx, req, opts...)
}

// GetBook returns a specific book.
func (c *BookstoreClient) GetBook(ctx context.Context, req *bookstorev1alpha1pb.GetBookRequest, opts ...gax.CallOption) (*bookstorev1alpha1pb.Book, error) {
	return c.internalClient.GetBook(ctx, req, opts...)
}

// DeleteBook deletes a book from a shelf.
func (c *BookstoreClient) DeleteBook(ctx context.Context, req *bookstorev1alpha1pb.DeleteBookRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteBook(ctx, req, opts...)
}

// bookstoreGRPCClient is a client for interacting with  over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type bookstoreGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing BookstoreClient
	CallOptions **BookstoreCallOptions

	// The gRPC API client.
	bookstoreClient bookstorev1alpha1pb.BookstoreServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewBookstoreClient creates a new bookstore service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// A simple Bookstore API.
//
// The API manages shelves and books resources. Shelves contain books.
func NewBookstoreClient(ctx context.Context, opts ...option.ClientOption) (*BookstoreClient, error) {
	clientOpts := defaultBookstoreGRPCClientOptions()
	if newBookstoreClientHook != nil {
		hookOpts, err := newBookstoreClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := BookstoreClient{CallOptions: defaultBookstoreCallOptions()}

	c := &bookstoreGRPCClient{
		connPool:        connPool,
		bookstoreClient: bookstorev1alpha1pb.NewBookstoreServiceClient(connPool),
		CallOptions:     &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *bookstoreGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *bookstoreGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{"x-goog-api-client", gax.XGoogHeader(kv...)}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *bookstoreGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *bookstoreGRPCClient) ListShelves(ctx context.Context, req *emptypb.Empty, opts ...gax.CallOption) (*bookstorev1alpha1pb.ListShelvesResponse, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).ListShelves[0:len((*c.CallOptions).ListShelves):len((*c.CallOptions).ListShelves)], opts...)
	var resp *bookstorev1alpha1pb.ListShelvesResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bookstoreClient.ListShelves(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bookstoreGRPCClient) CreateShelf(ctx context.Context, req *bookstorev1alpha1pb.CreateShelfRequest, opts ...gax.CallOption) (*bookstorev1alpha1pb.Shelf, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).CreateShelf[0:len((*c.CallOptions).CreateShelf):len((*c.CallOptions).CreateShelf)], opts...)
	var resp *bookstorev1alpha1pb.Shelf
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bookstoreClient.CreateShelf(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bookstoreGRPCClient) GetShelf(ctx context.Context, req *bookstorev1alpha1pb.GetShelfRequest, opts ...gax.CallOption) (*bookstorev1alpha1pb.Shelf, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).GetShelf[0:len((*c.CallOptions).GetShelf):len((*c.CallOptions).GetShelf)], opts...)
	var resp *bookstorev1alpha1pb.Shelf
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bookstoreClient.GetShelf(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bookstoreGRPCClient) DeleteShelf(ctx context.Context, req *bookstorev1alpha1pb.DeleteShelfRequest, opts ...gax.CallOption) error {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).DeleteShelf[0:len((*c.CallOptions).DeleteShelf):len((*c.CallOptions).DeleteShelf)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.bookstoreClient.DeleteShelf(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *bookstoreGRPCClient) ListBooks(ctx context.Context, req *bookstorev1alpha1pb.ListBooksRequest, opts ...gax.CallOption) (*bookstorev1alpha1pb.ListBooksResponse, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).ListBooks[0:len((*c.CallOptions).ListBooks):len((*c.CallOptions).ListBooks)], opts...)
	var resp *bookstorev1alpha1pb.ListBooksResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bookstoreClient.ListBooks(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bookstoreGRPCClient) CreateBook(ctx context.Context, req *bookstorev1alpha1pb.CreateBookRequest, opts ...gax.CallOption) (*bookstorev1alpha1pb.Book, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).CreateBook[0:len((*c.CallOptions).CreateBook):len((*c.CallOptions).CreateBook)], opts...)
	var resp *bookstorev1alpha1pb.Book
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bookstoreClient.CreateBook(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bookstoreGRPCClient) GetBook(ctx context.Context, req *bookstorev1alpha1pb.GetBookRequest, opts ...gax.CallOption) (*bookstorev1alpha1pb.Book, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).GetBook[0:len((*c.CallOptions).GetBook):len((*c.CallOptions).GetBook)], opts...)
	var resp *bookstorev1alpha1pb.Book
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bookstoreClient.GetBook(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bookstoreGRPCClient) DeleteBook(ctx context.Context, req *bookstorev1alpha1pb.DeleteBookRequest, opts ...gax.CallOption) error {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).DeleteBook[0:len((*c.CallOptions).DeleteBook):len((*c.CallOptions).DeleteBook)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.bookstoreClient.DeleteBook(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}
