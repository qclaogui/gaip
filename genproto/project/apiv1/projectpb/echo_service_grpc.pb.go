// (-- api-linter: core::0191::java-package=disabled
// (-- api-linter: core::0191::java-multiple-files=disabled
// (-- api-linter: core::0191::java-outer-classname=disabled
//     aip.dev/not-precedent: We need to do this because reasons. --)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: qclaogui/project/v1/echo_service.proto

package projectpb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EchoService_Echo_FullMethodName        = "/qclaogui.project.v1.EchoService/Echo"
	EchoService_Expand_FullMethodName      = "/qclaogui.project.v1.EchoService/Expand"
	EchoService_Collect_FullMethodName     = "/qclaogui.project.v1.EchoService/Collect"
	EchoService_Chat_FullMethodName        = "/qclaogui.project.v1.EchoService/Chat"
	EchoService_PagedExpand_FullMethodName = "/qclaogui.project.v1.EchoService/PagedExpand"
	EchoService_Wait_FullMethodName        = "/qclaogui.project.v1.EchoService/Wait"
	EchoService_Block_FullMethodName       = "/qclaogui.project.v1.EchoService/Block"
)

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServiceClient interface {
	// This method simply echoes the request. This method showcases unary RPCs.
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// This method splits the given content into words and will pass each word back
	// through the stream. This method showcases server-side streaming RPCs.
	Expand(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (EchoService_ExpandClient, error)
	// This method will collect the words given to it. When the stream is closed
	// by the client, this method will return the a concatenation of the strings
	// passed to it. This method showcases client-side streaming RPCs.
	Collect(ctx context.Context, opts ...grpc.CallOption) (EchoService_CollectClient, error)
	// This method, upon receiving a request on the stream, will pass the same
	// content back on the stream. This method showcases bidirectional
	// streaming RPCs.
	Chat(ctx context.Context, opts ...grpc.CallOption) (EchoService_ChatClient, error)
	// This is similar to the Expand method but instead of returning a stream of
	// expanded words, this method returns a paged list of expanded words.
	PagedExpand(ctx context.Context, in *PagedExpandRequest, opts ...grpc.CallOption) (*PagedExpandResponse, error)
	// This method will wait for the requested amount of time and then return.
	// This method showcases how a client handles a request timeout.
	Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// This method will block (wait) for the requested amount of time
	// and then return the response or error.
	// This method showcases how a client handles delays or retries.
	Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error)
}

type echoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServiceClient(cc grpc.ClientConnInterface) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, EchoService_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) Expand(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (EchoService_ExpandClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[0], EchoService_Expand_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceExpandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoService_ExpandClient interface {
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceExpandClient struct {
	grpc.ClientStream
}

func (x *echoServiceExpandClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) Collect(ctx context.Context, opts ...grpc.CallOption) (EchoService_CollectClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[1], EchoService_Collect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceCollectClient{stream}
	return x, nil
}

type EchoService_CollectClient interface {
	Send(*EchoRequest) error
	CloseAndRecv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceCollectClient struct {
	grpc.ClientStream
}

func (x *echoServiceCollectClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceCollectClient) CloseAndRecv() (*EchoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (EchoService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[2], EchoService_Chat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceChatClient{stream}
	return x, nil
}

type EchoService_ChatClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceChatClient struct {
	grpc.ClientStream
}

func (x *echoServiceChatClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceChatClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) PagedExpand(ctx context.Context, in *PagedExpandRequest, opts ...grpc.CallOption) (*PagedExpandResponse, error) {
	out := new(PagedExpandResponse)
	err := c.cc.Invoke(ctx, EchoService_PagedExpand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, EchoService_Wait_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, EchoService_Block_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServiceServer is the server API for EchoService service.
// All implementations should embed UnimplementedEchoServiceServer
// for forward compatibility
type EchoServiceServer interface {
	// This method simply echoes the request. This method showcases unary RPCs.
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// This method splits the given content into words and will pass each word back
	// through the stream. This method showcases server-side streaming RPCs.
	Expand(*ExpandRequest, EchoService_ExpandServer) error
	// This method will collect the words given to it. When the stream is closed
	// by the client, this method will return the a concatenation of the strings
	// passed to it. This method showcases client-side streaming RPCs.
	Collect(EchoService_CollectServer) error
	// This method, upon receiving a request on the stream, will pass the same
	// content back on the stream. This method showcases bidirectional
	// streaming RPCs.
	Chat(EchoService_ChatServer) error
	// This is similar to the Expand method but instead of returning a stream of
	// expanded words, this method returns a paged list of expanded words.
	PagedExpand(context.Context, *PagedExpandRequest) (*PagedExpandResponse, error)
	// This method will wait for the requested amount of time and then return.
	// This method showcases how a client handles a request timeout.
	Wait(context.Context, *WaitRequest) (*longrunningpb.Operation, error)
	// This method will block (wait) for the requested amount of time
	// and then return the response or error.
	// This method showcases how a client handles delays or retries.
	Block(context.Context, *BlockRequest) (*BlockResponse, error)
}

// UnimplementedEchoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEchoServiceServer struct {
}

func (UnimplementedEchoServiceServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedEchoServiceServer) Expand(*ExpandRequest, EchoService_ExpandServer) error {
	return status.Errorf(codes.Unimplemented, "method Expand not implemented")
}
func (UnimplementedEchoServiceServer) Collect(EchoService_CollectServer) error {
	return status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedEchoServiceServer) Chat(EchoService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedEchoServiceServer) PagedExpand(context.Context, *PagedExpandRequest) (*PagedExpandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagedExpand not implemented")
}
func (UnimplementedEchoServiceServer) Wait(context.Context, *WaitRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wait not implemented")
}
func (UnimplementedEchoServiceServer) Block(context.Context, *BlockRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Block not implemented")
}

// UnsafeEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServiceServer will
// result in compilation errors.
type UnsafeEchoServiceServer interface {
	mustEmbedUnimplementedEchoServiceServer()
}

func RegisterEchoServiceServer(s grpc.ServiceRegistrar, srv EchoServiceServer) {
	s.RegisterService(&EchoService_ServiceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_Expand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExpandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).Expand(m, &echoServiceExpandServer{stream})
}

type EchoService_ExpandServer interface {
	Send(*EchoResponse) error
	grpc.ServerStream
}

type echoServiceExpandServer struct {
	grpc.ServerStream
}

func (x *echoServiceExpandServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EchoService_Collect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).Collect(&echoServiceCollectServer{stream})
}

type EchoService_CollectServer interface {
	SendAndClose(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceCollectServer struct {
	grpc.ServerStream
}

func (x *echoServiceCollectServer) SendAndClose(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceCollectServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EchoService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).Chat(&echoServiceChatServer{stream})
}

type EchoService_ChatServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceChatServer struct {
	grpc.ServerStream
}

func (x *echoServiceChatServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceChatServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EchoService_PagedExpand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagedExpandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).PagedExpand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_PagedExpand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).PagedExpand(ctx, req.(*PagedExpandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Wait_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Wait(ctx, req.(*WaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Block_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Block(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EchoService_ServiceDesc is the grpc.ServiceDesc for EchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qclaogui.project.v1.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
		{
			MethodName: "PagedExpand",
			Handler:    _EchoService_PagedExpand_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _EchoService_Wait_Handler,
		},
		{
			MethodName: "Block",
			Handler:    _EchoService_Block_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Expand",
			Handler:       _EchoService_Expand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Collect",
			Handler:       _EchoService_Collect_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _EchoService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "qclaogui/project/v1/echo_service.proto",
}
