// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package a2a

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log/slog"
	"math"
	"net/http"
	"net/url"
	"time"

	gax "github.com/googleapis/gax-go/v2"
	a2apb "github.com/qclaogui/gaip/genproto/a2a/apiv1/a2apb"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newClientHook clientHook

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
	SendMessage                []gax.CallOption
	SendStreamingMessage       []gax.CallOption
	GetTask                    []gax.CallOption
	CancelTask                 []gax.CallOption
	TaskSubscription           []gax.CallOption
	CreateTaskPushNotification []gax.CallOption
	GetTaskPushNotification    []gax.CallOption
	ListTaskPushNotification   []gax.CallOption
	GetAgentCard               []gax.CallOption
}

func defaultGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("a2a.qclaogui.com:443"),
		internaloption.WithDefaultEndpointTemplate("a2a.qclaogui.com:443"),
		internaloption.WithDefaultMTLSEndpoint("a2a.qclaogui.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://a2a.qclaogui.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCallOptions() *CallOptions {
	return &CallOptions{
		SendMessage:                []gax.CallOption{},
		SendStreamingMessage:       []gax.CallOption{},
		GetTask:                    []gax.CallOption{},
		CancelTask:                 []gax.CallOption{},
		TaskSubscription:           []gax.CallOption{},
		CreateTaskPushNotification: []gax.CallOption{},
		GetTaskPushNotification:    []gax.CallOption{},
		ListTaskPushNotification:   []gax.CallOption{},
		GetAgentCard: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
	}
}

func defaultRESTCallOptions() *CallOptions {
	return &CallOptions{
		SendMessage:                []gax.CallOption{},
		SendStreamingMessage:       []gax.CallOption{},
		GetTask:                    []gax.CallOption{},
		CancelTask:                 []gax.CallOption{},
		TaskSubscription:           []gax.CallOption{},
		CreateTaskPushNotification: []gax.CallOption{},
		GetTaskPushNotification:    []gax.CallOption{},
		ListTaskPushNotification:   []gax.CallOption{},
		GetAgentCard: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
	}
}

// internalClient is an interface that defines the methods available from .
type internalClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	SendMessage(context.Context, *a2apb.SendMessageRequest, ...gax.CallOption) (*a2apb.SendMessageResponse, error)
	SendStreamingMessage(context.Context, *a2apb.SendMessageRequest, ...gax.CallOption) (a2apb.A2AService_SendStreamingMessageClient, error)
	GetTask(context.Context, *a2apb.GetTaskRequest, ...gax.CallOption) (*a2apb.Task, error)
	CancelTask(context.Context, *a2apb.CancelTaskRequest, ...gax.CallOption) (*a2apb.Task, error)
	TaskSubscription(context.Context, *a2apb.TaskSubscriptionRequest, ...gax.CallOption) (a2apb.A2AService_TaskSubscriptionClient, error)
	CreateTaskPushNotification(context.Context, *a2apb.CreateTaskPushNotificationRequest, ...gax.CallOption) (*a2apb.TaskPushNotificationConfig, error)
	GetTaskPushNotification(context.Context, *a2apb.GetTaskPushNotificationRequest, ...gax.CallOption) (*a2apb.TaskPushNotificationConfig, error)
	ListTaskPushNotification(context.Context, *a2apb.ListTaskPushNotificationRequest, ...gax.CallOption) *TaskPushNotificationConfigIterator
	GetAgentCard(context.Context, *a2apb.GetAgentCardRequest, ...gax.CallOption) (*a2apb.AgentCard, error)
}

// Client is a client for interacting with .
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// A2AService defines the gRPC version of the A2A protocol. This has a slightly
// different shape than the JSONRPC version to better conform to AIP-127,
// where appropriate. The nouns are AgentCard, Message, Task and
// TaskPushNotification.
//
//	Messages are not a standard resource so there is no get/delete/update/list
//	interface, only a send and stream custom methods.
//
//	Tasks have a get interface and custom cancel and subscribe methods.
//
//	TaskPushNotification are a resource whose parent is a task. They have get,
//	list and create methods.
//
//	AgentCard is a static resource with only a get method.
//	fields are not present as they donâ€™t comply with AIP rules, and the
//	optional history_length on the get task method is not present as it also
//	violates AIP-127 and AIP-131.
type Client struct {
	// The internal transport-dependent client.
	internalClient internalClient

	// The call options for this service.
	CallOptions *CallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *Client) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// SendMessage send a message to the agent. This is a blocking call that will return the
// task once it is completed, or a LRO if requested.
func (c *Client) SendMessage(ctx context.Context, req *a2apb.SendMessageRequest, opts ...gax.CallOption) (*a2apb.SendMessageResponse, error) {
	return c.internalClient.SendMessage(ctx, req, opts...)
}

// SendStreamingMessage sendStreamingMessage is a streaming call that will return a stream of
// task update events until the Task is in an interrupted or terminal state.
func (c *Client) SendStreamingMessage(ctx context.Context, req *a2apb.SendMessageRequest, opts ...gax.CallOption) (a2apb.A2AService_SendStreamingMessageClient, error) {
	return c.internalClient.SendStreamingMessage(ctx, req, opts...)
}

// GetTask get the current state of a task from the agent.
func (c *Client) GetTask(ctx context.Context, req *a2apb.GetTaskRequest, opts ...gax.CallOption) (*a2apb.Task, error) {
	return c.internalClient.GetTask(ctx, req, opts...)
}

// CancelTask cancel a task from the agent. If supported one should expect no
// more task updates for the task.
func (c *Client) CancelTask(ctx context.Context, req *a2apb.CancelTaskRequest, opts ...gax.CallOption) (*a2apb.Task, error) {
	return c.internalClient.CancelTask(ctx, req, opts...)
}

// TaskSubscription taskSubscription is a streaming call that will return a stream of task
// update events. This attaches the stream to an existing in process task.
// If the task is complete the stream will return the completed task (like
// GetTask) and close the stream.
func (c *Client) TaskSubscription(ctx context.Context, req *a2apb.TaskSubscriptionRequest, opts ...gax.CallOption) (a2apb.A2AService_TaskSubscriptionClient, error) {
	return c.internalClient.TaskSubscription(ctx, req, opts...)
}

// CreateTaskPushNotification set a push notification config for a task.
func (c *Client) CreateTaskPushNotification(ctx context.Context, req *a2apb.CreateTaskPushNotificationRequest, opts ...gax.CallOption) (*a2apb.TaskPushNotificationConfig, error) {
	return c.internalClient.CreateTaskPushNotification(ctx, req, opts...)
}

// GetTaskPushNotification get a push notification config for a task.
func (c *Client) GetTaskPushNotification(ctx context.Context, req *a2apb.GetTaskPushNotificationRequest, opts ...gax.CallOption) (*a2apb.TaskPushNotificationConfig, error) {
	return c.internalClient.GetTaskPushNotification(ctx, req, opts...)
}

// ListTaskPushNotification get a list of push notifications configured for a task.
func (c *Client) ListTaskPushNotification(ctx context.Context, req *a2apb.ListTaskPushNotificationRequest, opts ...gax.CallOption) *TaskPushNotificationConfigIterator {
	return c.internalClient.ListTaskPushNotification(ctx, req, opts...)
}

// GetAgentCard getAgentCard returns the agent card for the agent.
func (c *Client) GetAgentCard(ctx context.Context, req *a2apb.GetAgentCardRequest, opts ...gax.CallOption) (*a2apb.AgentCard, error) {
	return c.internalClient.GetAgentCard(ctx, req, opts...)
}

// gRPCClient is a client for interacting with  over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type gRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions

	// The gRPC API client.
	client a2apb.A2AServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string

	logger *slog.Logger
}

// NewClient creates a new a2a service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// A2AService defines the gRPC version of the A2A protocol. This has a slightly
// different shape than the JSONRPC version to better conform to AIP-127,
// where appropriate. The nouns are AgentCard, Message, Task and
// TaskPushNotification.
//
//	Messages are not a standard resource so there is no get/delete/update/list
//	interface, only a send and stream custom methods.
//
//	Tasks have a get interface and custom cancel and subscribe methods.
//
//	TaskPushNotification are a resource whose parent is a task. They have get,
//	list and create methods.
//
//	AgentCard is a static resource with only a get method.
//	fields are not present as they donâ€™t comply with AIP rules, and the
//	optional history_length on the get task method is not present as it also
//	violates AIP-127 and AIP-131.
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := defaultGRPCClientOptions()
	if newClientHook != nil {
		hookOpts, err := newClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := Client{CallOptions: defaultCallOptions()}

	c := &gRPCClient{
		connPool:    connPool,
		client:      a2apb.NewA2AServiceClient(connPool),
		CallOptions: &client.CallOptions,
		logger:      internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *gRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *gRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version, "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *gRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type restClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions

	logger *slog.Logger
}

// NewRESTClient creates a new a2a service rest client.
//
// A2AService defines the gRPC version of the A2A protocol. This has a slightly
// different shape than the JSONRPC version to better conform to AIP-127,
// where appropriate. The nouns are AgentCard, Message, Task and
// TaskPushNotification.
//
//	Messages are not a standard resource so there is no get/delete/update/list
//	interface, only a send and stream custom methods.
//
//	Tasks have a get interface and custom cancel and subscribe methods.
//
//	TaskPushNotification are a resource whose parent is a task. They have get,
//	list and create methods.
//
//	AgentCard is a static resource with only a get method.
//	fields are not present as they donâ€™t comply with AIP rules, and the
//	optional history_length on the get task method is not present as it also
//	violates AIP-127 and AIP-131.
func NewRESTClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := append(defaultRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultRESTCallOptions()
	c := &restClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
		logger:      internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	return &Client{internalClient: c, CallOptions: callOpts}, nil
}

func defaultRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://a2a.qclaogui.com"),
		internaloption.WithDefaultEndpointTemplate("https://a2a.qclaogui.com"),
		internaloption.WithDefaultMTLSEndpoint("https://a2a.qclaogui.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://a2a.qclaogui.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *restClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN", "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *restClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *restClient) Connection() *grpc.ClientConn {
	return nil
}

func (c *gRPCClient) SendMessage(ctx context.Context, req *a2apb.SendMessageRequest, opts ...gax.CallOption) (*a2apb.SendMessageResponse, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).SendMessage[0:len((*c.CallOptions).SendMessage):len((*c.CallOptions).SendMessage)], opts...)
	var resp *a2apb.SendMessageResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.client.SendMessage, req, settings.GRPC, c.logger, "SendMessage")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) SendStreamingMessage(ctx context.Context, req *a2apb.SendMessageRequest, opts ...gax.CallOption) (a2apb.A2AService_SendStreamingMessageClient, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).SendStreamingMessage[0:len((*c.CallOptions).SendStreamingMessage):len((*c.CallOptions).SendStreamingMessage)], opts...)
	var resp a2apb.A2AService_SendStreamingMessageClient
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		c.logger.DebugContext(ctx, "api streaming client request", "serviceName", serviceName, "rpcName", "SendStreamingMessage")
		resp, err = c.client.SendStreamingMessage(ctx, req, settings.GRPC...)
		c.logger.DebugContext(ctx, "api streaming client response", "serviceName", serviceName, "rpcName", "SendStreamingMessage")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) GetTask(ctx context.Context, req *a2apb.GetTaskRequest, opts ...gax.CallOption) (*a2apb.Task, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetTask[0:len((*c.CallOptions).GetTask):len((*c.CallOptions).GetTask)], opts...)
	var resp *a2apb.Task
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.client.GetTask, req, settings.GRPC, c.logger, "GetTask")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) CancelTask(ctx context.Context, req *a2apb.CancelTaskRequest, opts ...gax.CallOption) (*a2apb.Task, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CancelTask[0:len((*c.CallOptions).CancelTask):len((*c.CallOptions).CancelTask)], opts...)
	var resp *a2apb.Task
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.client.CancelTask, req, settings.GRPC, c.logger, "CancelTask")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) TaskSubscription(ctx context.Context, req *a2apb.TaskSubscriptionRequest, opts ...gax.CallOption) (a2apb.A2AService_TaskSubscriptionClient, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).TaskSubscription[0:len((*c.CallOptions).TaskSubscription):len((*c.CallOptions).TaskSubscription)], opts...)
	var resp a2apb.A2AService_TaskSubscriptionClient
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		c.logger.DebugContext(ctx, "api streaming client request", "serviceName", serviceName, "rpcName", "TaskSubscription")
		resp, err = c.client.TaskSubscription(ctx, req, settings.GRPC...)
		c.logger.DebugContext(ctx, "api streaming client response", "serviceName", serviceName, "rpcName", "TaskSubscription")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) CreateTaskPushNotification(ctx context.Context, req *a2apb.CreateTaskPushNotificationRequest, opts ...gax.CallOption) (*a2apb.TaskPushNotificationConfig, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateTaskPushNotification[0:len((*c.CallOptions).CreateTaskPushNotification):len((*c.CallOptions).CreateTaskPushNotification)], opts...)
	var resp *a2apb.TaskPushNotificationConfig
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.client.CreateTaskPushNotification, req, settings.GRPC, c.logger, "CreateTaskPushNotification")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) GetTaskPushNotification(ctx context.Context, req *a2apb.GetTaskPushNotificationRequest, opts ...gax.CallOption) (*a2apb.TaskPushNotificationConfig, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetTaskPushNotification[0:len((*c.CallOptions).GetTaskPushNotification):len((*c.CallOptions).GetTaskPushNotification)], opts...)
	var resp *a2apb.TaskPushNotificationConfig
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.client.GetTaskPushNotification, req, settings.GRPC, c.logger, "GetTaskPushNotification")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListTaskPushNotification(ctx context.Context, req *a2apb.ListTaskPushNotificationRequest, opts ...gax.CallOption) *TaskPushNotificationConfigIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListTaskPushNotification[0:len((*c.CallOptions).ListTaskPushNotification):len((*c.CallOptions).ListTaskPushNotification)], opts...)
	it := &TaskPushNotificationConfigIterator{}
	req = proto.Clone(req).(*a2apb.ListTaskPushNotificationRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*a2apb.TaskPushNotificationConfig, string, error) {
		resp := &a2apb.ListTaskPushNotificationResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = executeRPC(ctx, c.client.ListTaskPushNotification, req, settings.GRPC, c.logger, "ListTaskPushNotification")
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetConfigs(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) GetAgentCard(ctx context.Context, req *a2apb.GetAgentCardRequest, opts ...gax.CallOption) (*a2apb.AgentCard, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).GetAgentCard[0:len((*c.CallOptions).GetAgentCard):len((*c.CallOptions).GetAgentCard)], opts...)
	var resp *a2apb.AgentCard
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.client.GetAgentCard, req, settings.GRPC, c.logger, "GetAgentCard")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// SendMessage send a message to the agent. This is a blocking call that will return the
// task once it is completed, or a LRO if requested.
func (c *restClient) SendMessage(ctx context.Context, req *a2apb.SendMessageRequest, opts ...gax.CallOption) (*a2apb.SendMessageResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/message:send")

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).SendMessage[0:len((*c.CallOptions).SendMessage):len((*c.CallOptions).SendMessage)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &a2apb.SendMessageResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "SendMessage")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// SendStreamingMessage sendStreamingMessage is a streaming call that will return a stream of
// task update events until the Task is in an interrupted or terminal state.
func (c *restClient) SendStreamingMessage(ctx context.Context, req *a2apb.SendMessageRequest, opts ...gax.CallOption) (a2apb.A2AService_SendStreamingMessageClient, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/message:stream")

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	var streamClient *sendStreamingMessageRESTStreamClient
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := executeStreamingHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "SendStreamingMessage")
		if err != nil {
			return err
		}

		streamClient = &sendStreamingMessageRESTStreamClient{
			ctx:    ctx,
			md:     metadata.MD(httpRsp.Header),
			stream: gax.NewProtoJSONStreamReader(httpRsp.Body, (&a2apb.StreamResponse{}).ProtoReflect().Type()),
		}
		return nil
	}, opts...)

	return streamClient, e
}

// sendStreamingMessageRESTStreamClient is the stream client used to consume the server stream created by
// the REST implementation of SendStreamingMessage.
type sendStreamingMessageRESTStreamClient struct {
	ctx    context.Context
	md     metadata.MD
	stream *gax.ProtoJSONStream
}

func (c *sendStreamingMessageRESTStreamClient) Recv() (*a2apb.StreamResponse, error) {
	if err := c.ctx.Err(); err != nil {
		defer c.stream.Close()
		return nil, err
	}
	msg, err := c.stream.Recv()
	if err != nil {
		defer c.stream.Close()
		return nil, err
	}
	res := msg.(*a2apb.StreamResponse)
	return res, nil
}

func (c *sendStreamingMessageRESTStreamClient) Header() (metadata.MD, error) {
	return c.md, nil
}

func (c *sendStreamingMessageRESTStreamClient) Trailer() metadata.MD {
	return c.md
}

func (c *sendStreamingMessageRESTStreamClient) CloseSend() error {
	// This is a no-op to fulfill the interface.
	return errors.New("this method is not implemented for a server-stream")
}

func (c *sendStreamingMessageRESTStreamClient) Context() context.Context {
	return c.ctx
}

func (c *sendStreamingMessageRESTStreamClient) SendMsg(m interface{}) error {
	// This is a no-op to fulfill the interface.
	return errors.New("this method is not implemented for a server-stream")
}

func (c *sendStreamingMessageRESTStreamClient) RecvMsg(m interface{}) error {
	// This is a no-op to fulfill the interface.
	return errors.New("this method is not implemented, use Recv")
}

// GetTask get the current state of a task from the agent.
func (c *restClient) GetTask(ctx context.Context, req *a2apb.GetTaskRequest, opts ...gax.CallOption) (*a2apb.Task, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	if req.GetHistoryLength() != 0 {
		params.Add("historyLength", fmt.Sprintf("%v", req.GetHistoryLength()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetTask[0:len((*c.CallOptions).GetTask):len((*c.CallOptions).GetTask)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &a2apb.Task{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "GetTask")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// CancelTask cancel a task from the agent. If supported one should expect no
// more task updates for the task.
func (c *restClient) CancelTask(ctx context.Context, req *a2apb.CancelTaskRequest, opts ...gax.CallOption) (*a2apb.Task, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v:cancel", req.GetName())

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).CancelTask[0:len((*c.CallOptions).CancelTask):len((*c.CallOptions).CancelTask)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &a2apb.Task{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "CancelTask")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// TaskSubscription taskSubscription is a streaming call that will return a stream of task
// update events. This attaches the stream to an existing in process task.
// If the task is complete the stream will return the completed task (like
// GetTask) and close the stream.
func (c *restClient) TaskSubscription(ctx context.Context, req *a2apb.TaskSubscriptionRequest, opts ...gax.CallOption) (a2apb.A2AService_TaskSubscriptionClient, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v:subscribe", req.GetName())

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	var streamClient *taskSubscriptionRESTStreamClient
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := executeStreamingHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "TaskSubscription")
		if err != nil {
			return err
		}

		streamClient = &taskSubscriptionRESTStreamClient{
			ctx:    ctx,
			md:     metadata.MD(httpRsp.Header),
			stream: gax.NewProtoJSONStreamReader(httpRsp.Body, (&a2apb.StreamResponse{}).ProtoReflect().Type()),
		}
		return nil
	}, opts...)

	return streamClient, e
}

// taskSubscriptionRESTStreamClient is the stream client used to consume the server stream created by
// the REST implementation of TaskSubscription.
type taskSubscriptionRESTStreamClient struct {
	ctx    context.Context
	md     metadata.MD
	stream *gax.ProtoJSONStream
}

func (c *taskSubscriptionRESTStreamClient) Recv() (*a2apb.StreamResponse, error) {
	if err := c.ctx.Err(); err != nil {
		defer c.stream.Close()
		return nil, err
	}
	msg, err := c.stream.Recv()
	if err != nil {
		defer c.stream.Close()
		return nil, err
	}
	res := msg.(*a2apb.StreamResponse)
	return res, nil
}

func (c *taskSubscriptionRESTStreamClient) Header() (metadata.MD, error) {
	return c.md, nil
}

func (c *taskSubscriptionRESTStreamClient) Trailer() metadata.MD {
	return c.md
}

func (c *taskSubscriptionRESTStreamClient) CloseSend() error {
	// This is a no-op to fulfill the interface.
	return errors.New("this method is not implemented for a server-stream")
}

func (c *taskSubscriptionRESTStreamClient) Context() context.Context {
	return c.ctx
}

func (c *taskSubscriptionRESTStreamClient) SendMsg(m interface{}) error {
	// This is a no-op to fulfill the interface.
	return errors.New("this method is not implemented for a server-stream")
}

func (c *taskSubscriptionRESTStreamClient) RecvMsg(m interface{}) error {
	// This is a no-op to fulfill the interface.
	return errors.New("this method is not implemented, use Recv")
}

// CreateTaskPushNotification set a push notification config for a task.
func (c *restClient) CreateTaskPushNotification(ctx context.Context, req *a2apb.CreateTaskPushNotificationRequest, opts ...gax.CallOption) (*a2apb.TaskPushNotificationConfig, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetConfig()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetParent())

	params := url.Values{}
	params.Add("configId", fmt.Sprintf("%v", req.GetConfigId()))

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).CreateTaskPushNotification[0:len((*c.CallOptions).CreateTaskPushNotification):len((*c.CallOptions).CreateTaskPushNotification)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &a2apb.TaskPushNotificationConfig{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "CreateTaskPushNotification")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// GetTaskPushNotification get a push notification config for a task.
func (c *restClient) GetTaskPushNotification(ctx context.Context, req *a2apb.GetTaskPushNotificationRequest, opts ...gax.CallOption) (*a2apb.TaskPushNotificationConfig, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetTaskPushNotification[0:len((*c.CallOptions).GetTaskPushNotification):len((*c.CallOptions).GetTaskPushNotification)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &a2apb.TaskPushNotificationConfig{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "GetTaskPushNotification")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ListTaskPushNotification get a list of push notifications configured for a task.
func (c *restClient) ListTaskPushNotification(ctx context.Context, req *a2apb.ListTaskPushNotificationRequest, opts ...gax.CallOption) *TaskPushNotificationConfigIterator {
	it := &TaskPushNotificationConfigIterator{}
	req = proto.Clone(req).(*a2apb.ListTaskPushNotificationRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*a2apb.TaskPushNotificationConfig, string, error) {
		resp := &a2apb.ListTaskPushNotificationResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1/%v/pushNotifications", req.GetParent())

		params := url.Values{}
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "ListTaskPushNotification")
			if err != nil {
				return err
			}
			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetConfigs(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// GetAgentCard getAgentCard returns the agent card for the agent.
func (c *restClient) GetAgentCard(ctx context.Context, req *a2apb.GetAgentCardRequest, opts ...gax.CallOption) (*a2apb.AgentCard, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/card")

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetAgentCard[0:len((*c.CallOptions).GetAgentCard):len((*c.CallOptions).GetAgentCard)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &a2apb.AgentCard{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "GetAgentCard")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
