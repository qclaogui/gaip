// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: qclaogui/aiplatform/v1beta1/vertex_rag_data.proto

package aiplatformpb

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RagFile state.
type FileStatus_State int32

const (
	// RagFile state is unspecified.
	FileStatus_STATE_UNSPECIFIED FileStatus_State = 0
	// RagFile resource has been created and indexed successfully.
	FileStatus_ACTIVE FileStatus_State = 1
	// RagFile resource is in a problematic state.
	// See `error_message` field for details.
	FileStatus_ERROR FileStatus_State = 2
)

// Enum value maps for FileStatus_State.
var (
	FileStatus_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "ERROR",
	}
	FileStatus_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTIVE":            1,
		"ERROR":             2,
	}
)

func (x FileStatus_State) Enum() *FileStatus_State {
	p := new(FileStatus_State)
	*p = x
	return p
}

func (x FileStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_enumTypes[0].Descriptor()
}

func (FileStatus_State) Type() protoreflect.EnumType {
	return &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_enumTypes[0]
}

func (x FileStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileStatus_State.Descriptor instead.
func (FileStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{2, 0}
}

// RagCorpus life state.
type CorpusStatus_State int32

const (
	// This state is not supposed to happen.
	CorpusStatus_UNKNOWN CorpusStatus_State = 0
	// RagCorpus resource entry is initialized, but hasn't done validation.
	CorpusStatus_INITIALIZED CorpusStatus_State = 1
	// RagCorpus is provisioned successfully and is ready to serve.
	CorpusStatus_ACTIVE CorpusStatus_State = 2
	// RagCorpus is in a problematic situation.
	// See `error_message` field for details.
	CorpusStatus_ERROR CorpusStatus_State = 3
)

// Enum value maps for CorpusStatus_State.
var (
	CorpusStatus_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "INITIALIZED",
		2: "ACTIVE",
		3: "ERROR",
	}
	CorpusStatus_State_value = map[string]int32{
		"UNKNOWN":     0,
		"INITIALIZED": 1,
		"ACTIVE":      2,
		"ERROR":       3,
	}
)

func (x CorpusStatus_State) Enum() *CorpusStatus_State {
	p := new(CorpusStatus_State)
	*p = x
	return p
}

func (x CorpusStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CorpusStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_enumTypes[1].Descriptor()
}

func (CorpusStatus_State) Type() protoreflect.EnumType {
	return &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_enumTypes[1]
}

func (x CorpusStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CorpusStatus_State.Descriptor instead.
func (CorpusStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{4, 0}
}

// The type of the RagFile.
type RagFile_RagFileType int32

const (
	// RagFile type is unspecified.
	RagFile_RAG_FILE_TYPE_UNSPECIFIED RagFile_RagFileType = 0
	// RagFile type is TXT.
	RagFile_RAG_FILE_TYPE_TXT RagFile_RagFileType = 1
	// RagFile type is PDF.
	RagFile_RAG_FILE_TYPE_PDF RagFile_RagFileType = 2
)

// Enum value maps for RagFile_RagFileType.
var (
	RagFile_RagFileType_name = map[int32]string{
		0: "RAG_FILE_TYPE_UNSPECIFIED",
		1: "RAG_FILE_TYPE_TXT",
		2: "RAG_FILE_TYPE_PDF",
	}
	RagFile_RagFileType_value = map[string]int32{
		"RAG_FILE_TYPE_UNSPECIFIED": 0,
		"RAG_FILE_TYPE_TXT":         1,
		"RAG_FILE_TYPE_PDF":         2,
	}
)

func (x RagFile_RagFileType) Enum() *RagFile_RagFileType {
	p := new(RagFile_RagFileType)
	*p = x
	return p
}

func (x RagFile_RagFileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RagFile_RagFileType) Descriptor() protoreflect.EnumDescriptor {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_enumTypes[2].Descriptor()
}

func (RagFile_RagFileType) Type() protoreflect.EnumType {
	return &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_enumTypes[2]
}

func (x RagFile_RagFileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RagFile_RagFileType.Descriptor instead.
func (RagFile_RagFileType) EnumDescriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{6, 0}
}

// Config for the embedding model to use for RAG.
type RagEmbeddingModelConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The model config to use.
	//
	// Types that are valid to be assigned to ModelConfig:
	//
	//	*RagEmbeddingModelConfig_VertexPredictionEndpoint_
	//	*RagEmbeddingModelConfig_HybridSearchConfig_
	ModelConfig   isRagEmbeddingModelConfig_ModelConfig `protobuf_oneof:"model_config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagEmbeddingModelConfig) Reset() {
	*x = RagEmbeddingModelConfig{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagEmbeddingModelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagEmbeddingModelConfig) ProtoMessage() {}

func (x *RagEmbeddingModelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagEmbeddingModelConfig.ProtoReflect.Descriptor instead.
func (*RagEmbeddingModelConfig) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{0}
}

func (x *RagEmbeddingModelConfig) GetModelConfig() isRagEmbeddingModelConfig_ModelConfig {
	if x != nil {
		return x.ModelConfig
	}
	return nil
}

func (x *RagEmbeddingModelConfig) GetVertexPredictionEndpoint() *RagEmbeddingModelConfig_VertexPredictionEndpoint {
	if x != nil {
		if x, ok := x.ModelConfig.(*RagEmbeddingModelConfig_VertexPredictionEndpoint_); ok {
			return x.VertexPredictionEndpoint
		}
	}
	return nil
}

func (x *RagEmbeddingModelConfig) GetHybridSearchConfig() *RagEmbeddingModelConfig_HybridSearchConfig {
	if x != nil {
		if x, ok := x.ModelConfig.(*RagEmbeddingModelConfig_HybridSearchConfig_); ok {
			return x.HybridSearchConfig
		}
	}
	return nil
}

type isRagEmbeddingModelConfig_ModelConfig interface {
	isRagEmbeddingModelConfig_ModelConfig()
}

type RagEmbeddingModelConfig_VertexPredictionEndpoint_ struct {
	// The Vertex AI Prediction Endpoint that either refers to a publisher model
	// or an endpoint that is hosting a 1P fine-tuned text embedding model.
	// Endpoints hosting non-1P fine-tuned text embedding models are
	// currently not supported.
	// This is used for dense vector search.
	VertexPredictionEndpoint *RagEmbeddingModelConfig_VertexPredictionEndpoint `protobuf:"bytes,1,opt,name=vertex_prediction_endpoint,json=vertexPredictionEndpoint,proto3,oneof"`
}

type RagEmbeddingModelConfig_HybridSearchConfig_ struct {
	// Configuration for hybrid search.
	HybridSearchConfig *RagEmbeddingModelConfig_HybridSearchConfig `protobuf:"bytes,2,opt,name=hybrid_search_config,json=hybridSearchConfig,proto3,oneof"`
}

func (*RagEmbeddingModelConfig_VertexPredictionEndpoint_) isRagEmbeddingModelConfig_ModelConfig() {}

func (*RagEmbeddingModelConfig_HybridSearchConfig_) isRagEmbeddingModelConfig_ModelConfig() {}

// Config for the Vector DB to use for RAG.
type RagVectorDbConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The config for the Vector DB.
	//
	// Types that are valid to be assigned to VectorDb:
	//
	//	*RagVectorDbConfig_RagManagedDb_
	//	*RagVectorDbConfig_Weaviate_
	//	*RagVectorDbConfig_Pinecone_
	//	*RagVectorDbConfig_VertexFeatureStore_
	//	*RagVectorDbConfig_VertexVectorSearch_
	VectorDb isRagVectorDbConfig_VectorDb `protobuf_oneof:"vector_db"`
	// Authentication config for the chosen Vector DB.
	ApiAuth *ApiAuth `protobuf:"bytes,5,opt,name=api_auth,json=apiAuth,proto3" json:"api_auth,omitempty"`
	// Optional. Immutable. The embedding model config of the Vector DB.
	RagEmbeddingModelConfig *RagEmbeddingModelConfig `protobuf:"bytes,7,opt,name=rag_embedding_model_config,json=ragEmbeddingModelConfig,proto3" json:"rag_embedding_model_config,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *RagVectorDbConfig) Reset() {
	*x = RagVectorDbConfig{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagVectorDbConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagVectorDbConfig) ProtoMessage() {}

func (x *RagVectorDbConfig) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagVectorDbConfig.ProtoReflect.Descriptor instead.
func (*RagVectorDbConfig) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{1}
}

func (x *RagVectorDbConfig) GetVectorDb() isRagVectorDbConfig_VectorDb {
	if x != nil {
		return x.VectorDb
	}
	return nil
}

func (x *RagVectorDbConfig) GetRagManagedDb() *RagVectorDbConfig_RagManagedDb {
	if x != nil {
		if x, ok := x.VectorDb.(*RagVectorDbConfig_RagManagedDb_); ok {
			return x.RagManagedDb
		}
	}
	return nil
}

func (x *RagVectorDbConfig) GetWeaviate() *RagVectorDbConfig_Weaviate {
	if x != nil {
		if x, ok := x.VectorDb.(*RagVectorDbConfig_Weaviate_); ok {
			return x.Weaviate
		}
	}
	return nil
}

func (x *RagVectorDbConfig) GetPinecone() *RagVectorDbConfig_Pinecone {
	if x != nil {
		if x, ok := x.VectorDb.(*RagVectorDbConfig_Pinecone_); ok {
			return x.Pinecone
		}
	}
	return nil
}

func (x *RagVectorDbConfig) GetVertexFeatureStore() *RagVectorDbConfig_VertexFeatureStore {
	if x != nil {
		if x, ok := x.VectorDb.(*RagVectorDbConfig_VertexFeatureStore_); ok {
			return x.VertexFeatureStore
		}
	}
	return nil
}

func (x *RagVectorDbConfig) GetVertexVectorSearch() *RagVectorDbConfig_VertexVectorSearch {
	if x != nil {
		if x, ok := x.VectorDb.(*RagVectorDbConfig_VertexVectorSearch_); ok {
			return x.VertexVectorSearch
		}
	}
	return nil
}

func (x *RagVectorDbConfig) GetApiAuth() *ApiAuth {
	if x != nil {
		return x.ApiAuth
	}
	return nil
}

func (x *RagVectorDbConfig) GetRagEmbeddingModelConfig() *RagEmbeddingModelConfig {
	if x != nil {
		return x.RagEmbeddingModelConfig
	}
	return nil
}

type isRagVectorDbConfig_VectorDb interface {
	isRagVectorDbConfig_VectorDb()
}

type RagVectorDbConfig_RagManagedDb_ struct {
	// The config for the RAG-managed Vector DB.
	RagManagedDb *RagVectorDbConfig_RagManagedDb `protobuf:"bytes,1,opt,name=rag_managed_db,json=ragManagedDb,proto3,oneof"`
}

type RagVectorDbConfig_Weaviate_ struct {
	// The config for the Weaviate.
	Weaviate *RagVectorDbConfig_Weaviate `protobuf:"bytes,2,opt,name=weaviate,proto3,oneof"`
}

type RagVectorDbConfig_Pinecone_ struct {
	// The config for the Pinecone.
	Pinecone *RagVectorDbConfig_Pinecone `protobuf:"bytes,3,opt,name=pinecone,proto3,oneof"`
}

type RagVectorDbConfig_VertexFeatureStore_ struct {
	// The config for the Vertex Feature Store.
	VertexFeatureStore *RagVectorDbConfig_VertexFeatureStore `protobuf:"bytes,4,opt,name=vertex_feature_store,json=vertexFeatureStore,proto3,oneof"`
}

type RagVectorDbConfig_VertexVectorSearch_ struct {
	// The config for the Vertex Vector Search.
	VertexVectorSearch *RagVectorDbConfig_VertexVectorSearch `protobuf:"bytes,6,opt,name=vertex_vector_search,json=vertexVectorSearch,proto3,oneof"`
}

func (*RagVectorDbConfig_RagManagedDb_) isRagVectorDbConfig_VectorDb() {}

func (*RagVectorDbConfig_Weaviate_) isRagVectorDbConfig_VectorDb() {}

func (*RagVectorDbConfig_Pinecone_) isRagVectorDbConfig_VectorDb() {}

func (*RagVectorDbConfig_VertexFeatureStore_) isRagVectorDbConfig_VectorDb() {}

func (*RagVectorDbConfig_VertexVectorSearch_) isRagVectorDbConfig_VectorDb() {}

// RagFile status.
type FileStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. RagFile state.
	State FileStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=qclaogui.aiplatform.v1beta1.FileStatus_State" json:"state,omitempty"`
	// Output only. Only when the `state` field is ERROR.
	ErrorStatus   string `protobuf:"bytes,2,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileStatus) Reset() {
	*x = FileStatus{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStatus) ProtoMessage() {}

func (x *FileStatus) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStatus.ProtoReflect.Descriptor instead.
func (*FileStatus) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{2}
}

func (x *FileStatus) GetState() FileStatus_State {
	if x != nil {
		return x.State
	}
	return FileStatus_STATE_UNSPECIFIED
}

func (x *FileStatus) GetErrorStatus() string {
	if x != nil {
		return x.ErrorStatus
	}
	return ""
}

// Config for the Vertex AI Search.
type VertexAiSearchConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Vertex AI Search Serving Config resource full name. For example,
	// `projects/{project}/locations/{location}/collections/{collection}/engines/{engine}/servingConfigs/{serving_config}`
	// or
	// `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/servingConfigs/{serving_config}`.
	ServingConfig string `protobuf:"bytes,1,opt,name=serving_config,json=servingConfig,proto3" json:"serving_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VertexAiSearchConfig) Reset() {
	*x = VertexAiSearchConfig{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VertexAiSearchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VertexAiSearchConfig) ProtoMessage() {}

func (x *VertexAiSearchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VertexAiSearchConfig.ProtoReflect.Descriptor instead.
func (*VertexAiSearchConfig) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{3}
}

func (x *VertexAiSearchConfig) GetServingConfig() string {
	if x != nil {
		return x.ServingConfig
	}
	return ""
}

// RagCorpus status.
type CorpusStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. RagCorpus life state.
	State CorpusStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=qclaogui.aiplatform.v1beta1.CorpusStatus_State" json:"state,omitempty"`
	// Output only. Only when the `state` field is ERROR.
	ErrorStatus   string `protobuf:"bytes,2,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CorpusStatus) Reset() {
	*x = CorpusStatus{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CorpusStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorpusStatus) ProtoMessage() {}

func (x *CorpusStatus) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorpusStatus.ProtoReflect.Descriptor instead.
func (*CorpusStatus) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{4}
}

func (x *CorpusStatus) GetState() CorpusStatus_State {
	if x != nil {
		return x.State
	}
	return CorpusStatus_UNKNOWN
}

func (x *CorpusStatus) GetErrorStatus() string {
	if x != nil {
		return x.ErrorStatus
	}
	return ""
}

// A RagCorpus is a RagFile container and a project can have multiple
// RagCorpora.
type RagCorpus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The backend config of the RagCorpus.
	// It can be data store and/or retrieval engine.
	//
	// Types that are valid to be assigned to BackendConfig:
	//
	//	*RagCorpus_VectorDbConfig
	//	*RagCorpus_VertexAiSearchConfig
	BackendConfig isRagCorpus_BackendConfig `protobuf_oneof:"backend_config"`
	// Output only. The resource name of the RagCorpus.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The display name of the RagCorpus.
	// The name can be up to 128 characters long and can consist of any UTF-8
	// characters.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional. The description of the RagCorpus.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. Immutable. The embedding model config of the RagCorpus.
	//
	// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
	RagEmbeddingModelConfig *RagEmbeddingModelConfig `protobuf:"bytes,6,opt,name=rag_embedding_model_config,json=ragEmbeddingModelConfig,proto3" json:"rag_embedding_model_config,omitempty"`
	// Optional. Immutable. The Vector DB config of the RagCorpus.
	//
	// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
	RagVectorDbConfig *RagVectorDbConfig `protobuf:"bytes,7,opt,name=rag_vector_db_config,json=ragVectorDbConfig,proto3" json:"rag_vector_db_config,omitempty"`
	// Output only. Timestamp when this RagCorpus was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Timestamp when this RagCorpus was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. RagCorpus state.
	CorpusStatus *CorpusStatus `protobuf:"bytes,8,opt,name=corpus_status,json=corpusStatus,proto3" json:"corpus_status,omitempty"`
	// Output only. Number of RagFiles in the RagCorpus.
	RagFilesCount int32 `protobuf:"varint,11,opt,name=rag_files_count,json=ragFilesCount,proto3" json:"rag_files_count,omitempty"`
	// Optional. Immutable. The CMEK key name used to encrypt at-rest data related
	// to this Corpus. Only applicable to RagManagedDb option for Vector DB. This
	// field can only be set at corpus creation time, and cannot be updated or
	// deleted.
	EncryptionSpec *EncryptionSpec `protobuf:"bytes,12,opt,name=encryption_spec,json=encryptionSpec,proto3" json:"encryption_spec,omitempty"`
	// Optional. The corpus type config of the RagCorpus.
	CorpusTypeConfig *RagCorpus_CorpusTypeConfig `protobuf:"bytes,13,opt,name=corpus_type_config,json=corpusTypeConfig,proto3" json:"corpus_type_config,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RagCorpus) Reset() {
	*x = RagCorpus{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagCorpus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagCorpus) ProtoMessage() {}

func (x *RagCorpus) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagCorpus.ProtoReflect.Descriptor instead.
func (*RagCorpus) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{5}
}

func (x *RagCorpus) GetBackendConfig() isRagCorpus_BackendConfig {
	if x != nil {
		return x.BackendConfig
	}
	return nil
}

func (x *RagCorpus) GetVectorDbConfig() *RagVectorDbConfig {
	if x != nil {
		if x, ok := x.BackendConfig.(*RagCorpus_VectorDbConfig); ok {
			return x.VectorDbConfig
		}
	}
	return nil
}

func (x *RagCorpus) GetVertexAiSearchConfig() *VertexAiSearchConfig {
	if x != nil {
		if x, ok := x.BackendConfig.(*RagCorpus_VertexAiSearchConfig); ok {
			return x.VertexAiSearchConfig
		}
	}
	return nil
}

func (x *RagCorpus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RagCorpus) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RagCorpus) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
func (x *RagCorpus) GetRagEmbeddingModelConfig() *RagEmbeddingModelConfig {
	if x != nil {
		return x.RagEmbeddingModelConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
func (x *RagCorpus) GetRagVectorDbConfig() *RagVectorDbConfig {
	if x != nil {
		return x.RagVectorDbConfig
	}
	return nil
}

func (x *RagCorpus) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RagCorpus) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *RagCorpus) GetCorpusStatus() *CorpusStatus {
	if x != nil {
		return x.CorpusStatus
	}
	return nil
}

func (x *RagCorpus) GetRagFilesCount() int32 {
	if x != nil {
		return x.RagFilesCount
	}
	return 0
}

func (x *RagCorpus) GetEncryptionSpec() *EncryptionSpec {
	if x != nil {
		return x.EncryptionSpec
	}
	return nil
}

func (x *RagCorpus) GetCorpusTypeConfig() *RagCorpus_CorpusTypeConfig {
	if x != nil {
		return x.CorpusTypeConfig
	}
	return nil
}

type isRagCorpus_BackendConfig interface {
	isRagCorpus_BackendConfig()
}

type RagCorpus_VectorDbConfig struct {
	// Optional. Immutable. The config for the Vector DBs.
	VectorDbConfig *RagVectorDbConfig `protobuf:"bytes,9,opt,name=vector_db_config,json=vectorDbConfig,proto3,oneof"`
}

type RagCorpus_VertexAiSearchConfig struct {
	// Optional. Immutable. The config for the Vertex AI Search.
	VertexAiSearchConfig *VertexAiSearchConfig `protobuf:"bytes,10,opt,name=vertex_ai_search_config,json=vertexAiSearchConfig,proto3,oneof"`
}

func (*RagCorpus_VectorDbConfig) isRagCorpus_BackendConfig() {}

func (*RagCorpus_VertexAiSearchConfig) isRagCorpus_BackendConfig() {}

// A RagFile contains user data for chunking, embedding and indexing.
type RagFile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The origin location of the RagFile if it is imported from Google Cloud
	// Storage or Google Drive.
	//
	// Types that are valid to be assigned to RagFileSource:
	//
	//	*RagFile_GcsSource
	//	*RagFile_GoogleDriveSource
	//	*RagFile_DirectUploadSource
	//	*RagFile_SlackSource
	//	*RagFile_JiraSource
	//	*RagFile_SharePointSources
	RagFileSource isRagFile_RagFileSource `protobuf_oneof:"rag_file_source"`
	// Output only. The resource name of the RagFile.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The display name of the RagFile.
	// The name can be up to 128 characters long and can consist of any UTF-8
	// characters.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional. The description of the RagFile.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The size of the RagFile in bytes.
	SizeBytes int64 `protobuf:"varint,4,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// Output only. The type of the RagFile.
	RagFileType RagFile_RagFileType `protobuf:"varint,5,opt,name=rag_file_type,json=ragFileType,proto3,enum=qclaogui.aiplatform.v1beta1.RagFile_RagFileType" json:"rag_file_type,omitempty"`
	// Output only. Timestamp when this RagFile was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Timestamp when this RagFile was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. State of the RagFile.
	FileStatus    *FileStatus `protobuf:"bytes,13,opt,name=file_status,json=fileStatus,proto3" json:"file_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagFile) Reset() {
	*x = RagFile{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagFile) ProtoMessage() {}

func (x *RagFile) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagFile.ProtoReflect.Descriptor instead.
func (*RagFile) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{6}
}

func (x *RagFile) GetRagFileSource() isRagFile_RagFileSource {
	if x != nil {
		return x.RagFileSource
	}
	return nil
}

func (x *RagFile) GetGcsSource() *GcsSource {
	if x != nil {
		if x, ok := x.RagFileSource.(*RagFile_GcsSource); ok {
			return x.GcsSource
		}
	}
	return nil
}

func (x *RagFile) GetGoogleDriveSource() *GoogleDriveSource {
	if x != nil {
		if x, ok := x.RagFileSource.(*RagFile_GoogleDriveSource); ok {
			return x.GoogleDriveSource
		}
	}
	return nil
}

func (x *RagFile) GetDirectUploadSource() *DirectUploadSource {
	if x != nil {
		if x, ok := x.RagFileSource.(*RagFile_DirectUploadSource); ok {
			return x.DirectUploadSource
		}
	}
	return nil
}

func (x *RagFile) GetSlackSource() *SlackSource {
	if x != nil {
		if x, ok := x.RagFileSource.(*RagFile_SlackSource); ok {
			return x.SlackSource
		}
	}
	return nil
}

func (x *RagFile) GetJiraSource() *JiraSource {
	if x != nil {
		if x, ok := x.RagFileSource.(*RagFile_JiraSource); ok {
			return x.JiraSource
		}
	}
	return nil
}

func (x *RagFile) GetSharePointSources() *SharePointSources {
	if x != nil {
		if x, ok := x.RagFileSource.(*RagFile_SharePointSources); ok {
			return x.SharePointSources
		}
	}
	return nil
}

func (x *RagFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RagFile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RagFile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RagFile) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *RagFile) GetRagFileType() RagFile_RagFileType {
	if x != nil {
		return x.RagFileType
	}
	return RagFile_RAG_FILE_TYPE_UNSPECIFIED
}

func (x *RagFile) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RagFile) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *RagFile) GetFileStatus() *FileStatus {
	if x != nil {
		return x.FileStatus
	}
	return nil
}

type isRagFile_RagFileSource interface {
	isRagFile_RagFileSource()
}

type RagFile_GcsSource struct {
	// Output only. Google Cloud Storage location of the RagFile.
	// It does not support wildcards in the Cloud Storage uri for now.
	GcsSource *GcsSource `protobuf:"bytes,8,opt,name=gcs_source,json=gcsSource,proto3,oneof"`
}

type RagFile_GoogleDriveSource struct {
	// Output only. Google Drive location. Supports importing individual files
	// as well as Google Drive folders.
	GoogleDriveSource *GoogleDriveSource `protobuf:"bytes,9,opt,name=google_drive_source,json=googleDriveSource,proto3,oneof"`
}

type RagFile_DirectUploadSource struct {
	// Output only. The RagFile is encapsulated and uploaded in the
	// UploadRagFile request.
	DirectUploadSource *DirectUploadSource `protobuf:"bytes,10,opt,name=direct_upload_source,json=directUploadSource,proto3,oneof"`
}

type RagFile_SlackSource struct {
	// The RagFile is imported from a Slack channel.
	SlackSource *SlackSource `protobuf:"bytes,11,opt,name=slack_source,json=slackSource,proto3,oneof"`
}

type RagFile_JiraSource struct {
	// The RagFile is imported from a Jira query.
	JiraSource *JiraSource `protobuf:"bytes,12,opt,name=jira_source,json=jiraSource,proto3,oneof"`
}

type RagFile_SharePointSources struct {
	// The RagFile is imported from a SharePoint source.
	SharePointSources *SharePointSources `protobuf:"bytes,14,opt,name=share_point_sources,json=sharePointSources,proto3,oneof"`
}

func (*RagFile_GcsSource) isRagFile_RagFileSource() {}

func (*RagFile_GoogleDriveSource) isRagFile_RagFileSource() {}

func (*RagFile_DirectUploadSource) isRagFile_RagFileSource() {}

func (*RagFile_SlackSource) isRagFile_RagFileSource() {}

func (*RagFile_JiraSource) isRagFile_RagFileSource() {}

func (*RagFile_SharePointSources) isRagFile_RagFileSource() {}

// A RagChunk includes the content of a chunk of a RagFile, and associated
// metadata.
type RagChunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The content of the chunk.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// If populated, represents where the chunk starts and ends in the document.
	PageSpan      *RagChunk_PageSpan `protobuf:"bytes,2,opt,name=page_span,json=pageSpan,proto3,oneof" json:"page_span,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagChunk) Reset() {
	*x = RagChunk{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagChunk) ProtoMessage() {}

func (x *RagChunk) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagChunk.ProtoReflect.Descriptor instead.
func (*RagChunk) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{7}
}

func (x *RagChunk) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *RagChunk) GetPageSpan() *RagChunk_PageSpan {
	if x != nil {
		return x.PageSpan
	}
	return nil
}

// Specifies the size and overlap of chunks for RagFiles.
type RagFileChunkingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the chunking config for RagFiles.
	//
	// Types that are valid to be assigned to ChunkingConfig:
	//
	//	*RagFileChunkingConfig_FixedLengthChunking_
	ChunkingConfig isRagFileChunkingConfig_ChunkingConfig `protobuf_oneof:"chunking_config"`
	// The size of the chunks.
	//
	// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
	ChunkSize int32 `protobuf:"varint,1,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	// The overlap between chunks.
	//
	// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
	ChunkOverlap  int32 `protobuf:"varint,2,opt,name=chunk_overlap,json=chunkOverlap,proto3" json:"chunk_overlap,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagFileChunkingConfig) Reset() {
	*x = RagFileChunkingConfig{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagFileChunkingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagFileChunkingConfig) ProtoMessage() {}

func (x *RagFileChunkingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagFileChunkingConfig.ProtoReflect.Descriptor instead.
func (*RagFileChunkingConfig) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{8}
}

func (x *RagFileChunkingConfig) GetChunkingConfig() isRagFileChunkingConfig_ChunkingConfig {
	if x != nil {
		return x.ChunkingConfig
	}
	return nil
}

func (x *RagFileChunkingConfig) GetFixedLengthChunking() *RagFileChunkingConfig_FixedLengthChunking {
	if x != nil {
		if x, ok := x.ChunkingConfig.(*RagFileChunkingConfig_FixedLengthChunking_); ok {
			return x.FixedLengthChunking
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
func (x *RagFileChunkingConfig) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
func (x *RagFileChunkingConfig) GetChunkOverlap() int32 {
	if x != nil {
		return x.ChunkOverlap
	}
	return 0
}

type isRagFileChunkingConfig_ChunkingConfig interface {
	isRagFileChunkingConfig_ChunkingConfig()
}

type RagFileChunkingConfig_FixedLengthChunking_ struct {
	// Specifies the fixed length chunking config.
	FixedLengthChunking *RagFileChunkingConfig_FixedLengthChunking `protobuf:"bytes,3,opt,name=fixed_length_chunking,json=fixedLengthChunking,proto3,oneof"`
}

func (*RagFileChunkingConfig_FixedLengthChunking_) isRagFileChunkingConfig_ChunkingConfig() {}

// Specifies the transformation config for RagFiles.
type RagFileTransformationConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the chunking config for RagFiles.
	RagFileChunkingConfig *RagFileChunkingConfig `protobuf:"bytes,1,opt,name=rag_file_chunking_config,json=ragFileChunkingConfig,proto3" json:"rag_file_chunking_config,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RagFileTransformationConfig) Reset() {
	*x = RagFileTransformationConfig{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagFileTransformationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagFileTransformationConfig) ProtoMessage() {}

func (x *RagFileTransformationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagFileTransformationConfig.ProtoReflect.Descriptor instead.
func (*RagFileTransformationConfig) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{9}
}

func (x *RagFileTransformationConfig) GetRagFileChunkingConfig() *RagFileChunkingConfig {
	if x != nil {
		return x.RagFileChunkingConfig
	}
	return nil
}

// Specifies the parsing config for RagFiles.
type RagFileParsingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parser to use for RagFiles.
	//
	// Types that are valid to be assigned to Parser:
	//
	//	*RagFileParsingConfig_AdvancedParser_
	//	*RagFileParsingConfig_LayoutParser_
	//	*RagFileParsingConfig_LlmParser_
	Parser isRagFileParsingConfig_Parser `protobuf_oneof:"parser"`
	// Whether to use advanced PDF parsing.
	//
	// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
	UseAdvancedPdfParsing bool `protobuf:"varint,2,opt,name=use_advanced_pdf_parsing,json=useAdvancedPdfParsing,proto3" json:"use_advanced_pdf_parsing,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RagFileParsingConfig) Reset() {
	*x = RagFileParsingConfig{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagFileParsingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagFileParsingConfig) ProtoMessage() {}

func (x *RagFileParsingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagFileParsingConfig.ProtoReflect.Descriptor instead.
func (*RagFileParsingConfig) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{10}
}

func (x *RagFileParsingConfig) GetParser() isRagFileParsingConfig_Parser {
	if x != nil {
		return x.Parser
	}
	return nil
}

func (x *RagFileParsingConfig) GetAdvancedParser() *RagFileParsingConfig_AdvancedParser {
	if x != nil {
		if x, ok := x.Parser.(*RagFileParsingConfig_AdvancedParser_); ok {
			return x.AdvancedParser
		}
	}
	return nil
}

func (x *RagFileParsingConfig) GetLayoutParser() *RagFileParsingConfig_LayoutParser {
	if x != nil {
		if x, ok := x.Parser.(*RagFileParsingConfig_LayoutParser_); ok {
			return x.LayoutParser
		}
	}
	return nil
}

func (x *RagFileParsingConfig) GetLlmParser() *RagFileParsingConfig_LlmParser {
	if x != nil {
		if x, ok := x.Parser.(*RagFileParsingConfig_LlmParser_); ok {
			return x.LlmParser
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
func (x *RagFileParsingConfig) GetUseAdvancedPdfParsing() bool {
	if x != nil {
		return x.UseAdvancedPdfParsing
	}
	return false
}

type isRagFileParsingConfig_Parser interface {
	isRagFileParsingConfig_Parser()
}

type RagFileParsingConfig_AdvancedParser_ struct {
	// The Advanced Parser to use for RagFiles.
	AdvancedParser *RagFileParsingConfig_AdvancedParser `protobuf:"bytes,3,opt,name=advanced_parser,json=advancedParser,proto3,oneof"`
}

type RagFileParsingConfig_LayoutParser_ struct {
	// The Layout Parser to use for RagFiles.
	LayoutParser *RagFileParsingConfig_LayoutParser `protobuf:"bytes,4,opt,name=layout_parser,json=layoutParser,proto3,oneof"`
}

type RagFileParsingConfig_LlmParser_ struct {
	// The LLM Parser to use for RagFiles.
	LlmParser *RagFileParsingConfig_LlmParser `protobuf:"bytes,5,opt,name=llm_parser,json=llmParser,proto3,oneof"`
}

func (*RagFileParsingConfig_AdvancedParser_) isRagFileParsingConfig_Parser() {}

func (*RagFileParsingConfig_LayoutParser_) isRagFileParsingConfig_Parser() {}

func (*RagFileParsingConfig_LlmParser_) isRagFileParsingConfig_Parser() {}

// Config for uploading RagFile.
type UploadRagFileConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the size and overlap of chunks after uploading RagFile.
	//
	// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
	RagFileChunkingConfig *RagFileChunkingConfig `protobuf:"bytes,1,opt,name=rag_file_chunking_config,json=ragFileChunkingConfig,proto3" json:"rag_file_chunking_config,omitempty"`
	// Specifies the transformation config for RagFiles.
	RagFileTransformationConfig *RagFileTransformationConfig `protobuf:"bytes,3,opt,name=rag_file_transformation_config,json=ragFileTransformationConfig,proto3" json:"rag_file_transformation_config,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *UploadRagFileConfig) Reset() {
	*x = UploadRagFileConfig{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadRagFileConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRagFileConfig) ProtoMessage() {}

func (x *UploadRagFileConfig) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRagFileConfig.ProtoReflect.Descriptor instead.
func (*UploadRagFileConfig) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{11}
}

// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
func (x *UploadRagFileConfig) GetRagFileChunkingConfig() *RagFileChunkingConfig {
	if x != nil {
		return x.RagFileChunkingConfig
	}
	return nil
}

func (x *UploadRagFileConfig) GetRagFileTransformationConfig() *RagFileTransformationConfig {
	if x != nil {
		return x.RagFileTransformationConfig
	}
	return nil
}

// Config for importing RagFiles.
type ImportRagFilesConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source of the import.
	//
	// Types that are valid to be assigned to ImportSource:
	//
	//	*ImportRagFilesConfig_GcsSource
	//	*ImportRagFilesConfig_GoogleDriveSource
	//	*ImportRagFilesConfig_SlackSource
	//	*ImportRagFilesConfig_JiraSource
	//	*ImportRagFilesConfig_SharePointSources
	ImportSource isImportRagFilesConfig_ImportSource `protobuf_oneof:"import_source"`
	// Optional. If provided, all partial failures are written to the sink.
	// Deprecated. Prefer to use the `import_result_sink`.
	//
	// Types that are valid to be assigned to PartialFailureSink:
	//
	//	*ImportRagFilesConfig_PartialFailureGcsSink
	//	*ImportRagFilesConfig_PartialFailureBigquerySink
	PartialFailureSink isImportRagFilesConfig_PartialFailureSink `protobuf_oneof:"partial_failure_sink"`
	// Optional. If provided, all successfully imported files and all partial
	// failures are written to the sink.
	//
	// Types that are valid to be assigned to ImportResultSink:
	//
	//	*ImportRagFilesConfig_ImportResultGcsSink
	//	*ImportRagFilesConfig_ImportResultBigquerySink
	ImportResultSink isImportRagFilesConfig_ImportResultSink `protobuf_oneof:"import_result_sink"`
	// Specifies the size and overlap of chunks after importing RagFiles.
	//
	// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
	RagFileChunkingConfig *RagFileChunkingConfig `protobuf:"bytes,4,opt,name=rag_file_chunking_config,json=ragFileChunkingConfig,proto3" json:"rag_file_chunking_config,omitempty"`
	// Specifies the transformation config for RagFiles.
	RagFileTransformationConfig *RagFileTransformationConfig `protobuf:"bytes,16,opt,name=rag_file_transformation_config,json=ragFileTransformationConfig,proto3" json:"rag_file_transformation_config,omitempty"`
	// Optional. Specifies the parsing config for RagFiles.
	// RAG will use the default parser if this field is not set.
	RagFileParsingConfig *RagFileParsingConfig `protobuf:"bytes,8,opt,name=rag_file_parsing_config,json=ragFileParsingConfig,proto3" json:"rag_file_parsing_config,omitempty"`
	// Optional. The max number of queries per minute that this job is allowed to
	// make to the embedding model specified on the corpus. This value is specific
	// to this job and not shared across other import jobs. Consult the Quotas
	// page on the project to set an appropriate value here.
	// If unspecified, a default value of 1,000 QPM would be used.
	MaxEmbeddingRequestsPerMin int32 `protobuf:"varint,5,opt,name=max_embedding_requests_per_min,json=maxEmbeddingRequestsPerMin,proto3" json:"max_embedding_requests_per_min,omitempty"`
	// Optional. The max number of queries per minute that the indexing pipeline
	// job is allowed to make to the embedding model specified in the project.
	// Please follow the quota usage guideline of the embedding model you use to
	// set the value properly.If this value is not specified,
	// max_embedding_requests_per_min will be used by indexing pipeline job as the
	// global limit.
	GlobalMaxEmbeddingRequestsPerMin int32 `protobuf:"varint,18,opt,name=global_max_embedding_requests_per_min,json=globalMaxEmbeddingRequestsPerMin,proto3" json:"global_max_embedding_requests_per_min,omitempty"`
	// Rebuilds the ANN index to optimize for recall on the imported data.
	// Only applicable for RagCorpora running on RagManagedDb with
	// `retrieval_strategy` set to `ANN`. The rebuild will be performed using the
	// existing ANN config set on the RagCorpus. To change the ANN config, please
	// use the UpdateRagCorpus API.
	//
	// Default is false, i.e., index is not rebuilt.
	RebuildAnnIndex bool `protobuf:"varint,19,opt,name=rebuild_ann_index,json=rebuildAnnIndex,proto3" json:"rebuild_ann_index,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ImportRagFilesConfig) Reset() {
	*x = ImportRagFilesConfig{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportRagFilesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportRagFilesConfig) ProtoMessage() {}

func (x *ImportRagFilesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportRagFilesConfig.ProtoReflect.Descriptor instead.
func (*ImportRagFilesConfig) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{12}
}

func (x *ImportRagFilesConfig) GetImportSource() isImportRagFilesConfig_ImportSource {
	if x != nil {
		return x.ImportSource
	}
	return nil
}

func (x *ImportRagFilesConfig) GetGcsSource() *GcsSource {
	if x != nil {
		if x, ok := x.ImportSource.(*ImportRagFilesConfig_GcsSource); ok {
			return x.GcsSource
		}
	}
	return nil
}

func (x *ImportRagFilesConfig) GetGoogleDriveSource() *GoogleDriveSource {
	if x != nil {
		if x, ok := x.ImportSource.(*ImportRagFilesConfig_GoogleDriveSource); ok {
			return x.GoogleDriveSource
		}
	}
	return nil
}

func (x *ImportRagFilesConfig) GetSlackSource() *SlackSource {
	if x != nil {
		if x, ok := x.ImportSource.(*ImportRagFilesConfig_SlackSource); ok {
			return x.SlackSource
		}
	}
	return nil
}

func (x *ImportRagFilesConfig) GetJiraSource() *JiraSource {
	if x != nil {
		if x, ok := x.ImportSource.(*ImportRagFilesConfig_JiraSource); ok {
			return x.JiraSource
		}
	}
	return nil
}

func (x *ImportRagFilesConfig) GetSharePointSources() *SharePointSources {
	if x != nil {
		if x, ok := x.ImportSource.(*ImportRagFilesConfig_SharePointSources); ok {
			return x.SharePointSources
		}
	}
	return nil
}

func (x *ImportRagFilesConfig) GetPartialFailureSink() isImportRagFilesConfig_PartialFailureSink {
	if x != nil {
		return x.PartialFailureSink
	}
	return nil
}

// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
func (x *ImportRagFilesConfig) GetPartialFailureGcsSink() *GcsDestination {
	if x != nil {
		if x, ok := x.PartialFailureSink.(*ImportRagFilesConfig_PartialFailureGcsSink); ok {
			return x.PartialFailureGcsSink
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
func (x *ImportRagFilesConfig) GetPartialFailureBigquerySink() *BigQueryDestination {
	if x != nil {
		if x, ok := x.PartialFailureSink.(*ImportRagFilesConfig_PartialFailureBigquerySink); ok {
			return x.PartialFailureBigquerySink
		}
	}
	return nil
}

func (x *ImportRagFilesConfig) GetImportResultSink() isImportRagFilesConfig_ImportResultSink {
	if x != nil {
		return x.ImportResultSink
	}
	return nil
}

func (x *ImportRagFilesConfig) GetImportResultGcsSink() *GcsDestination {
	if x != nil {
		if x, ok := x.ImportResultSink.(*ImportRagFilesConfig_ImportResultGcsSink); ok {
			return x.ImportResultGcsSink
		}
	}
	return nil
}

func (x *ImportRagFilesConfig) GetImportResultBigquerySink() *BigQueryDestination {
	if x != nil {
		if x, ok := x.ImportResultSink.(*ImportRagFilesConfig_ImportResultBigquerySink); ok {
			return x.ImportResultBigquerySink
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
func (x *ImportRagFilesConfig) GetRagFileChunkingConfig() *RagFileChunkingConfig {
	if x != nil {
		return x.RagFileChunkingConfig
	}
	return nil
}

func (x *ImportRagFilesConfig) GetRagFileTransformationConfig() *RagFileTransformationConfig {
	if x != nil {
		return x.RagFileTransformationConfig
	}
	return nil
}

func (x *ImportRagFilesConfig) GetRagFileParsingConfig() *RagFileParsingConfig {
	if x != nil {
		return x.RagFileParsingConfig
	}
	return nil
}

func (x *ImportRagFilesConfig) GetMaxEmbeddingRequestsPerMin() int32 {
	if x != nil {
		return x.MaxEmbeddingRequestsPerMin
	}
	return 0
}

func (x *ImportRagFilesConfig) GetGlobalMaxEmbeddingRequestsPerMin() int32 {
	if x != nil {
		return x.GlobalMaxEmbeddingRequestsPerMin
	}
	return 0
}

func (x *ImportRagFilesConfig) GetRebuildAnnIndex() bool {
	if x != nil {
		return x.RebuildAnnIndex
	}
	return false
}

type isImportRagFilesConfig_ImportSource interface {
	isImportRagFilesConfig_ImportSource()
}

type ImportRagFilesConfig_GcsSource struct {
	// Google Cloud Storage location. Supports importing individual files as
	// well as entire Google Cloud Storage directories. Sample formats:
	// - `gs://bucket_name/my_directory/object_name/my_file.txt`
	// - `gs://bucket_name/my_directory`
	GcsSource *GcsSource `protobuf:"bytes,2,opt,name=gcs_source,json=gcsSource,proto3,oneof"`
}

type ImportRagFilesConfig_GoogleDriveSource struct {
	// Google Drive location. Supports importing individual files as
	// well as Google Drive folders.
	GoogleDriveSource *GoogleDriveSource `protobuf:"bytes,3,opt,name=google_drive_source,json=googleDriveSource,proto3,oneof"`
}

type ImportRagFilesConfig_SlackSource struct {
	// Slack channels with their corresponding access tokens.
	SlackSource *SlackSource `protobuf:"bytes,6,opt,name=slack_source,json=slackSource,proto3,oneof"`
}

type ImportRagFilesConfig_JiraSource struct {
	// Jira queries with their corresponding authentication.
	JiraSource *JiraSource `protobuf:"bytes,7,opt,name=jira_source,json=jiraSource,proto3,oneof"`
}

type ImportRagFilesConfig_SharePointSources struct {
	// SharePoint sources.
	SharePointSources *SharePointSources `protobuf:"bytes,13,opt,name=share_point_sources,json=sharePointSources,proto3,oneof"`
}

func (*ImportRagFilesConfig_GcsSource) isImportRagFilesConfig_ImportSource() {}

func (*ImportRagFilesConfig_GoogleDriveSource) isImportRagFilesConfig_ImportSource() {}

func (*ImportRagFilesConfig_SlackSource) isImportRagFilesConfig_ImportSource() {}

func (*ImportRagFilesConfig_JiraSource) isImportRagFilesConfig_ImportSource() {}

func (*ImportRagFilesConfig_SharePointSources) isImportRagFilesConfig_ImportSource() {}

type isImportRagFilesConfig_PartialFailureSink interface {
	isImportRagFilesConfig_PartialFailureSink()
}

type ImportRagFilesConfig_PartialFailureGcsSink struct {
	// The Cloud Storage path to write partial failures to.
	// Deprecated. Prefer to use `import_result_gcs_sink`.
	//
	// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
	PartialFailureGcsSink *GcsDestination `protobuf:"bytes,11,opt,name=partial_failure_gcs_sink,json=partialFailureGcsSink,proto3,oneof"`
}

type ImportRagFilesConfig_PartialFailureBigquerySink struct {
	// The BigQuery destination to write partial failures to. It should be a
	// bigquery table resource name (e.g.
	// "bq://projectId.bqDatasetId.bqTableId"). The dataset must exist. If the
	// table does not exist, it will be created with the expected schema. If the
	// table exists, the schema will be validated and data will be added to this
	// existing table.
	// Deprecated. Prefer to use `import_result_bq_sink`.
	//
	// Deprecated: Marked as deprecated in qclaogui/aiplatform/v1beta1/vertex_rag_data.proto.
	PartialFailureBigquerySink *BigQueryDestination `protobuf:"bytes,12,opt,name=partial_failure_bigquery_sink,json=partialFailureBigquerySink,proto3,oneof"`
}

func (*ImportRagFilesConfig_PartialFailureGcsSink) isImportRagFilesConfig_PartialFailureSink() {}

func (*ImportRagFilesConfig_PartialFailureBigquerySink) isImportRagFilesConfig_PartialFailureSink() {}

type isImportRagFilesConfig_ImportResultSink interface {
	isImportRagFilesConfig_ImportResultSink()
}

type ImportRagFilesConfig_ImportResultGcsSink struct {
	// The Cloud Storage path to write import result to.
	ImportResultGcsSink *GcsDestination `protobuf:"bytes,14,opt,name=import_result_gcs_sink,json=importResultGcsSink,proto3,oneof"`
}

type ImportRagFilesConfig_ImportResultBigquerySink struct {
	// The BigQuery destination to write import result to. It should be a
	// bigquery table resource name (e.g.
	// "bq://projectId.bqDatasetId.bqTableId"). The dataset must exist. If the
	// table does not exist, it will be created with the expected schema. If the
	// table exists, the schema will be validated and data will be added to this
	// existing table.
	ImportResultBigquerySink *BigQueryDestination `protobuf:"bytes,15,opt,name=import_result_bigquery_sink,json=importResultBigquerySink,proto3,oneof"`
}

func (*ImportRagFilesConfig_ImportResultGcsSink) isImportRagFilesConfig_ImportResultSink() {}

func (*ImportRagFilesConfig_ImportResultBigquerySink) isImportRagFilesConfig_ImportResultSink() {}

// Configuration message for RagManagedDb used by RagEngine.
type RagManagedDbConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The tier of the RagManagedDb.
	//
	// Types that are valid to be assigned to Tier:
	//
	//	*RagManagedDbConfig_Enterprise_
	//	*RagManagedDbConfig_Basic_
	Tier          isRagManagedDbConfig_Tier `protobuf_oneof:"tier"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagManagedDbConfig) Reset() {
	*x = RagManagedDbConfig{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagManagedDbConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagManagedDbConfig) ProtoMessage() {}

func (x *RagManagedDbConfig) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagManagedDbConfig.ProtoReflect.Descriptor instead.
func (*RagManagedDbConfig) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{13}
}

func (x *RagManagedDbConfig) GetTier() isRagManagedDbConfig_Tier {
	if x != nil {
		return x.Tier
	}
	return nil
}

func (x *RagManagedDbConfig) GetEnterprise() *RagManagedDbConfig_Enterprise {
	if x != nil {
		if x, ok := x.Tier.(*RagManagedDbConfig_Enterprise_); ok {
			return x.Enterprise
		}
	}
	return nil
}

func (x *RagManagedDbConfig) GetBasic() *RagManagedDbConfig_Basic {
	if x != nil {
		if x, ok := x.Tier.(*RagManagedDbConfig_Basic_); ok {
			return x.Basic
		}
	}
	return nil
}

type isRagManagedDbConfig_Tier interface {
	isRagManagedDbConfig_Tier()
}

type RagManagedDbConfig_Enterprise_ struct {
	// Sets the RagManagedDb to the Enterprise tier. This is the default tier
	// if not explicitly chosen.
	Enterprise *RagManagedDbConfig_Enterprise `protobuf:"bytes,1,opt,name=enterprise,proto3,oneof"`
}

type RagManagedDbConfig_Basic_ struct {
	// Sets the RagManagedDb to the Basic tier.
	Basic *RagManagedDbConfig_Basic `protobuf:"bytes,2,opt,name=basic,proto3,oneof"`
}

func (*RagManagedDbConfig_Enterprise_) isRagManagedDbConfig_Tier() {}

func (*RagManagedDbConfig_Basic_) isRagManagedDbConfig_Tier() {}

// Config for RagEngine.
type RagEngineConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier. The name of the RagEngineConfig.
	// Format:
	// `projects/{project}/locations/{location}/ragEngineConfig`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The config of the RagManagedDb used by RagEngine.
	RagManagedDbConfig *RagManagedDbConfig `protobuf:"bytes,2,opt,name=rag_managed_db_config,json=ragManagedDbConfig,proto3" json:"rag_managed_db_config,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RagEngineConfig) Reset() {
	*x = RagEngineConfig{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagEngineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagEngineConfig) ProtoMessage() {}

func (x *RagEngineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagEngineConfig.ProtoReflect.Descriptor instead.
func (*RagEngineConfig) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{14}
}

func (x *RagEngineConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RagEngineConfig) GetRagManagedDbConfig() *RagManagedDbConfig {
	if x != nil {
		return x.RagManagedDbConfig
	}
	return nil
}

// Config representing a model hosted on Vertex Prediction Endpoint.
type RagEmbeddingModelConfig_VertexPredictionEndpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The endpoint resource name.
	// Format:
	// `projects/{project}/locations/{location}/publishers/{publisher}/models/{model}`
	// or
	// `projects/{project}/locations/{location}/endpoints/{endpoint}`
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Output only. The resource name of the model that is deployed on the
	// endpoint. Present only when the endpoint is not a publisher model.
	// Pattern:
	// `projects/{project}/locations/{location}/models/{model}`
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// Output only. Version ID of the model that is deployed on the endpoint.
	// Present only when the endpoint is not a publisher model.
	ModelVersionId string `protobuf:"bytes,3,opt,name=model_version_id,json=modelVersionId,proto3" json:"model_version_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RagEmbeddingModelConfig_VertexPredictionEndpoint) Reset() {
	*x = RagEmbeddingModelConfig_VertexPredictionEndpoint{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagEmbeddingModelConfig_VertexPredictionEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagEmbeddingModelConfig_VertexPredictionEndpoint) ProtoMessage() {}

func (x *RagEmbeddingModelConfig_VertexPredictionEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagEmbeddingModelConfig_VertexPredictionEndpoint.ProtoReflect.Descriptor instead.
func (*RagEmbeddingModelConfig_VertexPredictionEndpoint) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RagEmbeddingModelConfig_VertexPredictionEndpoint) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RagEmbeddingModelConfig_VertexPredictionEndpoint) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *RagEmbeddingModelConfig_VertexPredictionEndpoint) GetModelVersionId() string {
	if x != nil {
		return x.ModelVersionId
	}
	return ""
}

// Configuration for sparse emebdding generation.
type RagEmbeddingModelConfig_SparseEmbeddingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The model to use for sparse embedding generation.
	//
	// Types that are valid to be assigned to Model:
	//
	//	*RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25_
	Model         isRagEmbeddingModelConfig_SparseEmbeddingConfig_Model `protobuf_oneof:"model"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagEmbeddingModelConfig_SparseEmbeddingConfig) Reset() {
	*x = RagEmbeddingModelConfig_SparseEmbeddingConfig{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagEmbeddingModelConfig_SparseEmbeddingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagEmbeddingModelConfig_SparseEmbeddingConfig) ProtoMessage() {}

func (x *RagEmbeddingModelConfig_SparseEmbeddingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagEmbeddingModelConfig_SparseEmbeddingConfig.ProtoReflect.Descriptor instead.
func (*RagEmbeddingModelConfig_SparseEmbeddingConfig) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RagEmbeddingModelConfig_SparseEmbeddingConfig) GetModel() isRagEmbeddingModelConfig_SparseEmbeddingConfig_Model {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *RagEmbeddingModelConfig_SparseEmbeddingConfig) GetBm25() *RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25 {
	if x != nil {
		if x, ok := x.Model.(*RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25_); ok {
			return x.Bm25
		}
	}
	return nil
}

type isRagEmbeddingModelConfig_SparseEmbeddingConfig_Model interface {
	isRagEmbeddingModelConfig_SparseEmbeddingConfig_Model()
}

type RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25_ struct {
	// Use BM25 scoring algorithm.
	Bm25 *RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25 `protobuf:"bytes,1,opt,name=bm25,proto3,oneof"`
}

func (*RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25_) isRagEmbeddingModelConfig_SparseEmbeddingConfig_Model() {
}

// Config for hybrid search.
type RagEmbeddingModelConfig_HybridSearchConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The configuration for sparse embedding generation. This field
	// is optional the default behavior depends on the vector database choice on
	// the RagCorpus.
	SparseEmbeddingConfig *RagEmbeddingModelConfig_SparseEmbeddingConfig `protobuf:"bytes,1,opt,name=sparse_embedding_config,json=sparseEmbeddingConfig,proto3" json:"sparse_embedding_config,omitempty"`
	// Required. The Vertex AI Prediction Endpoint that hosts the embedding
	// model for dense embedding generations.
	DenseEmbeddingModelPredictionEndpoint *RagEmbeddingModelConfig_VertexPredictionEndpoint `protobuf:"bytes,2,opt,name=dense_embedding_model_prediction_endpoint,json=denseEmbeddingModelPredictionEndpoint,proto3" json:"dense_embedding_model_prediction_endpoint,omitempty"`
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *RagEmbeddingModelConfig_HybridSearchConfig) Reset() {
	*x = RagEmbeddingModelConfig_HybridSearchConfig{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagEmbeddingModelConfig_HybridSearchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagEmbeddingModelConfig_HybridSearchConfig) ProtoMessage() {}

func (x *RagEmbeddingModelConfig_HybridSearchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagEmbeddingModelConfig_HybridSearchConfig.ProtoReflect.Descriptor instead.
func (*RagEmbeddingModelConfig_HybridSearchConfig) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RagEmbeddingModelConfig_HybridSearchConfig) GetSparseEmbeddingConfig() *RagEmbeddingModelConfig_SparseEmbeddingConfig {
	if x != nil {
		return x.SparseEmbeddingConfig
	}
	return nil
}

func (x *RagEmbeddingModelConfig_HybridSearchConfig) GetDenseEmbeddingModelPredictionEndpoint() *RagEmbeddingModelConfig_VertexPredictionEndpoint {
	if x != nil {
		return x.DenseEmbeddingModelPredictionEndpoint
	}
	return nil
}

// Message for BM25 parameters.
type RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. Use multilingual tokenizer if set to true.
	Multilingual bool `protobuf:"varint,1,opt,name=multilingual,proto3" json:"multilingual,omitempty"`
	// Optional. The parameter to control term frequency saturation. It
	// determines the scaling between the matching term frequency and final
	// score. k1 is in the range of [1.2, 3]. The default value is 1.2.
	K1 *float32 `protobuf:"fixed32,2,opt,name=k1,proto3,oneof" json:"k1,omitempty"`
	// Optional. The parameter to control document length normalization. It
	// determines how much the document length affects the final score. b is
	// in the range of [0, 1]. The default value is 0.75.
	B             *float32 `protobuf:"fixed32,3,opt,name=b,proto3,oneof" json:"b,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25) Reset() {
	*x = RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25) ProtoMessage() {}

func (x *RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25.ProtoReflect.Descriptor instead.
func (*RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25) GetMultilingual() bool {
	if x != nil {
		return x.Multilingual
	}
	return false
}

func (x *RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25) GetK1() float32 {
	if x != nil && x.K1 != nil {
		return *x.K1
	}
	return 0
}

func (x *RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25) GetB() float32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

// The config for the default RAG-managed Vector DB.
type RagVectorDbConfig_RagManagedDb struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Choice of retrieval strategy.
	//
	// Types that are valid to be assigned to RetrievalStrategy:
	//
	//	*RagVectorDbConfig_RagManagedDb_Knn
	//	*RagVectorDbConfig_RagManagedDb_Ann
	RetrievalStrategy isRagVectorDbConfig_RagManagedDb_RetrievalStrategy `protobuf_oneof:"retrieval_strategy"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RagVectorDbConfig_RagManagedDb) Reset() {
	*x = RagVectorDbConfig_RagManagedDb{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagVectorDbConfig_RagManagedDb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagVectorDbConfig_RagManagedDb) ProtoMessage() {}

func (x *RagVectorDbConfig_RagManagedDb) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagVectorDbConfig_RagManagedDb.ProtoReflect.Descriptor instead.
func (*RagVectorDbConfig_RagManagedDb) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RagVectorDbConfig_RagManagedDb) GetRetrievalStrategy() isRagVectorDbConfig_RagManagedDb_RetrievalStrategy {
	if x != nil {
		return x.RetrievalStrategy
	}
	return nil
}

func (x *RagVectorDbConfig_RagManagedDb) GetKnn() *RagVectorDbConfig_RagManagedDb_KNN {
	if x != nil {
		if x, ok := x.RetrievalStrategy.(*RagVectorDbConfig_RagManagedDb_Knn); ok {
			return x.Knn
		}
	}
	return nil
}

func (x *RagVectorDbConfig_RagManagedDb) GetAnn() *RagVectorDbConfig_RagManagedDb_ANN {
	if x != nil {
		if x, ok := x.RetrievalStrategy.(*RagVectorDbConfig_RagManagedDb_Ann); ok {
			return x.Ann
		}
	}
	return nil
}

type isRagVectorDbConfig_RagManagedDb_RetrievalStrategy interface {
	isRagVectorDbConfig_RagManagedDb_RetrievalStrategy()
}

type RagVectorDbConfig_RagManagedDb_Knn struct {
	// Performs a KNN search on RagCorpus.
	// Default choice if not specified.
	Knn *RagVectorDbConfig_RagManagedDb_KNN `protobuf:"bytes,1,opt,name=knn,proto3,oneof"`
}

type RagVectorDbConfig_RagManagedDb_Ann struct {
	// Performs an ANN search on RagCorpus. Use this if you have a lot of
	// files (> 10K) in your RagCorpus and want to reduce the search latency.
	Ann *RagVectorDbConfig_RagManagedDb_ANN `protobuf:"bytes,2,opt,name=ann,proto3,oneof"`
}

func (*RagVectorDbConfig_RagManagedDb_Knn) isRagVectorDbConfig_RagManagedDb_RetrievalStrategy() {}

func (*RagVectorDbConfig_RagManagedDb_Ann) isRagVectorDbConfig_RagManagedDb_RetrievalStrategy() {}

// The config for the Weaviate.
type RagVectorDbConfig_Weaviate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Weaviate DB instance HTTP endpoint. e.g. 34.56.78.90:8080
	// Vertex RAG only supports HTTP connection to Weaviate.
	// This value cannot be changed after it's set.
	HttpEndpoint string `protobuf:"bytes,1,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty"`
	// The corresponding collection this corpus maps to.
	// This value cannot be changed after it's set.
	CollectionName string `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RagVectorDbConfig_Weaviate) Reset() {
	*x = RagVectorDbConfig_Weaviate{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagVectorDbConfig_Weaviate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagVectorDbConfig_Weaviate) ProtoMessage() {}

func (x *RagVectorDbConfig_Weaviate) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagVectorDbConfig_Weaviate.ProtoReflect.Descriptor instead.
func (*RagVectorDbConfig_Weaviate) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{1, 1}
}

func (x *RagVectorDbConfig_Weaviate) GetHttpEndpoint() string {
	if x != nil {
		return x.HttpEndpoint
	}
	return ""
}

func (x *RagVectorDbConfig_Weaviate) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

// The config for the Pinecone.
type RagVectorDbConfig_Pinecone struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pinecone index name.
	// This value cannot be changed after it's set.
	IndexName     string `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagVectorDbConfig_Pinecone) Reset() {
	*x = RagVectorDbConfig_Pinecone{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagVectorDbConfig_Pinecone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagVectorDbConfig_Pinecone) ProtoMessage() {}

func (x *RagVectorDbConfig_Pinecone) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagVectorDbConfig_Pinecone.ProtoReflect.Descriptor instead.
func (*RagVectorDbConfig_Pinecone) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{1, 2}
}

func (x *RagVectorDbConfig_Pinecone) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// The config for the Vertex Feature Store.
type RagVectorDbConfig_VertexFeatureStore struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the FeatureView.
	// Format:
	// `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}`
	FeatureViewResourceName string `protobuf:"bytes,1,opt,name=feature_view_resource_name,json=featureViewResourceName,proto3" json:"feature_view_resource_name,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *RagVectorDbConfig_VertexFeatureStore) Reset() {
	*x = RagVectorDbConfig_VertexFeatureStore{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagVectorDbConfig_VertexFeatureStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagVectorDbConfig_VertexFeatureStore) ProtoMessage() {}

func (x *RagVectorDbConfig_VertexFeatureStore) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagVectorDbConfig_VertexFeatureStore.ProtoReflect.Descriptor instead.
func (*RagVectorDbConfig_VertexFeatureStore) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{1, 3}
}

func (x *RagVectorDbConfig_VertexFeatureStore) GetFeatureViewResourceName() string {
	if x != nil {
		return x.FeatureViewResourceName
	}
	return ""
}

// The config for the Vertex Vector Search.
type RagVectorDbConfig_VertexVectorSearch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the Index Endpoint.
	// Format:
	// `projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}`
	IndexEndpoint string `protobuf:"bytes,1,opt,name=index_endpoint,json=indexEndpoint,proto3" json:"index_endpoint,omitempty"`
	// The resource name of the Index.
	// Format:
	// `projects/{project}/locations/{location}/indexes/{index}`
	Index         string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagVectorDbConfig_VertexVectorSearch) Reset() {
	*x = RagVectorDbConfig_VertexVectorSearch{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagVectorDbConfig_VertexVectorSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagVectorDbConfig_VertexVectorSearch) ProtoMessage() {}

func (x *RagVectorDbConfig_VertexVectorSearch) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagVectorDbConfig_VertexVectorSearch.ProtoReflect.Descriptor instead.
func (*RagVectorDbConfig_VertexVectorSearch) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{1, 4}
}

func (x *RagVectorDbConfig_VertexVectorSearch) GetIndexEndpoint() string {
	if x != nil {
		return x.IndexEndpoint
	}
	return ""
}

func (x *RagVectorDbConfig_VertexVectorSearch) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

// Config for KNN search.
type RagVectorDbConfig_RagManagedDb_KNN struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagVectorDbConfig_RagManagedDb_KNN) Reset() {
	*x = RagVectorDbConfig_RagManagedDb_KNN{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagVectorDbConfig_RagManagedDb_KNN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagVectorDbConfig_RagManagedDb_KNN) ProtoMessage() {}

func (x *RagVectorDbConfig_RagManagedDb_KNN) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagVectorDbConfig_RagManagedDb_KNN.ProtoReflect.Descriptor instead.
func (*RagVectorDbConfig_RagManagedDb_KNN) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{1, 0, 0}
}

// Config for ANN search.
//
// RagManagedDb uses a tree-based structure to partition data and
// facilitate faster searches. As a tradeoff, it requires longer indexing
// time and manual triggering of index rebuild via the ImportRagFiles and
// UpdateRagCorpus API.
type RagVectorDbConfig_RagManagedDb_ANN struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The depth of the tree-based structure. Only depth values of 2 and 3 are
	// supported.
	//
	// Recommended value is 2 if you have if you have O(10K) files in the
	// RagCorpus and set this to 3 if more than that.
	//
	// Default value is 2.
	TreeDepth int32 `protobuf:"varint,1,opt,name=tree_depth,json=treeDepth,proto3" json:"tree_depth,omitempty"`
	// Number of leaf nodes in the tree-based structure. Each leaf node
	// contains groups of closely related vectors along with their
	// corresponding centroid.
	//
	// Recommended value is 10 * sqrt(num of RagFiles in your RagCorpus).
	//
	// Default value is 500.
	LeafCount     int32 `protobuf:"varint,2,opt,name=leaf_count,json=leafCount,proto3" json:"leaf_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagVectorDbConfig_RagManagedDb_ANN) Reset() {
	*x = RagVectorDbConfig_RagManagedDb_ANN{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagVectorDbConfig_RagManagedDb_ANN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagVectorDbConfig_RagManagedDb_ANN) ProtoMessage() {}

func (x *RagVectorDbConfig_RagManagedDb_ANN) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagVectorDbConfig_RagManagedDb_ANN.ProtoReflect.Descriptor instead.
func (*RagVectorDbConfig_RagManagedDb_ANN) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *RagVectorDbConfig_RagManagedDb_ANN) GetTreeDepth() int32 {
	if x != nil {
		return x.TreeDepth
	}
	return 0
}

func (x *RagVectorDbConfig_RagManagedDb_ANN) GetLeafCount() int32 {
	if x != nil {
		return x.LeafCount
	}
	return 0
}

// The config for the corpus type of the RagCorpus.
type RagCorpus_CorpusTypeConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional.
	// Whether the RagCorpus is used as document store or memory store.
	//
	// Types that are valid to be assigned to CorpusTypeConfig:
	//
	//	*RagCorpus_CorpusTypeConfig_DocumentCorpus_
	//	*RagCorpus_CorpusTypeConfig_MemoryCorpus_
	CorpusTypeConfig isRagCorpus_CorpusTypeConfig_CorpusTypeConfig `protobuf_oneof:"corpus_type_config"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RagCorpus_CorpusTypeConfig) Reset() {
	*x = RagCorpus_CorpusTypeConfig{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagCorpus_CorpusTypeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagCorpus_CorpusTypeConfig) ProtoMessage() {}

func (x *RagCorpus_CorpusTypeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagCorpus_CorpusTypeConfig.ProtoReflect.Descriptor instead.
func (*RagCorpus_CorpusTypeConfig) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{5, 0}
}

func (x *RagCorpus_CorpusTypeConfig) GetCorpusTypeConfig() isRagCorpus_CorpusTypeConfig_CorpusTypeConfig {
	if x != nil {
		return x.CorpusTypeConfig
	}
	return nil
}

func (x *RagCorpus_CorpusTypeConfig) GetDocumentCorpus() *RagCorpus_CorpusTypeConfig_DocumentCorpus {
	if x != nil {
		if x, ok := x.CorpusTypeConfig.(*RagCorpus_CorpusTypeConfig_DocumentCorpus_); ok {
			return x.DocumentCorpus
		}
	}
	return nil
}

func (x *RagCorpus_CorpusTypeConfig) GetMemoryCorpus() *RagCorpus_CorpusTypeConfig_MemoryCorpus {
	if x != nil {
		if x, ok := x.CorpusTypeConfig.(*RagCorpus_CorpusTypeConfig_MemoryCorpus_); ok {
			return x.MemoryCorpus
		}
	}
	return nil
}

type isRagCorpus_CorpusTypeConfig_CorpusTypeConfig interface {
	isRagCorpus_CorpusTypeConfig_CorpusTypeConfig()
}

type RagCorpus_CorpusTypeConfig_DocumentCorpus_ struct {
	// Optional. Config for the document corpus.
	DocumentCorpus *RagCorpus_CorpusTypeConfig_DocumentCorpus `protobuf:"bytes,1,opt,name=document_corpus,json=documentCorpus,proto3,oneof"`
}

type RagCorpus_CorpusTypeConfig_MemoryCorpus_ struct {
	// Optional. Config for the memory corpus.
	MemoryCorpus *RagCorpus_CorpusTypeConfig_MemoryCorpus `protobuf:"bytes,2,opt,name=memory_corpus,json=memoryCorpus,proto3,oneof"`
}

func (*RagCorpus_CorpusTypeConfig_DocumentCorpus_) isRagCorpus_CorpusTypeConfig_CorpusTypeConfig() {}

func (*RagCorpus_CorpusTypeConfig_MemoryCorpus_) isRagCorpus_CorpusTypeConfig_CorpusTypeConfig() {}

// Config for the document corpus.
type RagCorpus_CorpusTypeConfig_DocumentCorpus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagCorpus_CorpusTypeConfig_DocumentCorpus) Reset() {
	*x = RagCorpus_CorpusTypeConfig_DocumentCorpus{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagCorpus_CorpusTypeConfig_DocumentCorpus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagCorpus_CorpusTypeConfig_DocumentCorpus) ProtoMessage() {}

func (x *RagCorpus_CorpusTypeConfig_DocumentCorpus) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagCorpus_CorpusTypeConfig_DocumentCorpus.ProtoReflect.Descriptor instead.
func (*RagCorpus_CorpusTypeConfig_DocumentCorpus) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{5, 0, 0}
}

// Config for the memory corpus.
type RagCorpus_CorpusTypeConfig_MemoryCorpus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LLM parser to use for the memory corpus.
	LlmParser     *RagFileParsingConfig_LlmParser `protobuf:"bytes,1,opt,name=llm_parser,json=llmParser,proto3" json:"llm_parser,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagCorpus_CorpusTypeConfig_MemoryCorpus) Reset() {
	*x = RagCorpus_CorpusTypeConfig_MemoryCorpus{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagCorpus_CorpusTypeConfig_MemoryCorpus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagCorpus_CorpusTypeConfig_MemoryCorpus) ProtoMessage() {}

func (x *RagCorpus_CorpusTypeConfig_MemoryCorpus) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagCorpus_CorpusTypeConfig_MemoryCorpus.ProtoReflect.Descriptor instead.
func (*RagCorpus_CorpusTypeConfig_MemoryCorpus) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{5, 0, 1}
}

func (x *RagCorpus_CorpusTypeConfig_MemoryCorpus) GetLlmParser() *RagFileParsingConfig_LlmParser {
	if x != nil {
		return x.LlmParser
	}
	return nil
}

// Represents where the chunk starts and ends in the document.
type RagChunk_PageSpan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Page where chunk starts in the document. Inclusive. 1-indexed.
	FirstPage int32 `protobuf:"varint,1,opt,name=first_page,json=firstPage,proto3" json:"first_page,omitempty"`
	// Page where chunk ends in the document. Inclusive. 1-indexed.
	LastPage      int32 `protobuf:"varint,2,opt,name=last_page,json=lastPage,proto3" json:"last_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagChunk_PageSpan) Reset() {
	*x = RagChunk_PageSpan{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagChunk_PageSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagChunk_PageSpan) ProtoMessage() {}

func (x *RagChunk_PageSpan) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagChunk_PageSpan.ProtoReflect.Descriptor instead.
func (*RagChunk_PageSpan) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{7, 0}
}

func (x *RagChunk_PageSpan) GetFirstPage() int32 {
	if x != nil {
		return x.FirstPage
	}
	return 0
}

func (x *RagChunk_PageSpan) GetLastPage() int32 {
	if x != nil {
		return x.LastPage
	}
	return 0
}

// Specifies the fixed length chunking config.
type RagFileChunkingConfig_FixedLengthChunking struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The size of the chunks.
	ChunkSize int32 `protobuf:"varint,1,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	// The overlap between chunks.
	ChunkOverlap  int32 `protobuf:"varint,2,opt,name=chunk_overlap,json=chunkOverlap,proto3" json:"chunk_overlap,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagFileChunkingConfig_FixedLengthChunking) Reset() {
	*x = RagFileChunkingConfig_FixedLengthChunking{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagFileChunkingConfig_FixedLengthChunking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagFileChunkingConfig_FixedLengthChunking) ProtoMessage() {}

func (x *RagFileChunkingConfig_FixedLengthChunking) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagFileChunkingConfig_FixedLengthChunking.ProtoReflect.Descriptor instead.
func (*RagFileChunkingConfig_FixedLengthChunking) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{8, 0}
}

func (x *RagFileChunkingConfig_FixedLengthChunking) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *RagFileChunkingConfig_FixedLengthChunking) GetChunkOverlap() int32 {
	if x != nil {
		return x.ChunkOverlap
	}
	return 0
}

// Specifies the advanced parsing for RagFiles.
type RagFileParsingConfig_AdvancedParser struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to use advanced PDF parsing.
	UseAdvancedPdfParsing bool `protobuf:"varint,1,opt,name=use_advanced_pdf_parsing,json=useAdvancedPdfParsing,proto3" json:"use_advanced_pdf_parsing,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RagFileParsingConfig_AdvancedParser) Reset() {
	*x = RagFileParsingConfig_AdvancedParser{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagFileParsingConfig_AdvancedParser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagFileParsingConfig_AdvancedParser) ProtoMessage() {}

func (x *RagFileParsingConfig_AdvancedParser) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagFileParsingConfig_AdvancedParser.ProtoReflect.Descriptor instead.
func (*RagFileParsingConfig_AdvancedParser) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{10, 0}
}

func (x *RagFileParsingConfig_AdvancedParser) GetUseAdvancedPdfParsing() bool {
	if x != nil {
		return x.UseAdvancedPdfParsing
	}
	return false
}

// Document AI Layout Parser config.
type RagFileParsingConfig_LayoutParser struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The full resource name of a Document AI processor or processor version.
	// The processor must have type `LAYOUT_PARSER_PROCESSOR`. If specified, the
	// `additional_config.parse_as_scanned_pdf` field must be false.
	// Format:
	// * `projects/{project_id}/locations/{location}/processors/{processor_id}`
	// * `projects/{project_id}/locations/{location}/processors/{processor_id}/processorVersions/{processor_version_id}`
	ProcessorName string `protobuf:"bytes,1,opt,name=processor_name,json=processorName,proto3" json:"processor_name,omitempty"`
	// The maximum number of requests the job is allowed to make to the Document
	// AI processor per minute. Consult
	// https://cloud.google.com/document-ai/quotas and the Quota page for your
	// project to set an appropriate value here. If unspecified, a default value
	// of 120 QPM would be used.
	MaxParsingRequestsPerMin int32 `protobuf:"varint,2,opt,name=max_parsing_requests_per_min,json=maxParsingRequestsPerMin,proto3" json:"max_parsing_requests_per_min,omitempty"`
	// The maximum number of requests the job is allowed to make to the Document
	// AI processor per minute in this project. Consult
	// https://cloud.google.com/document-ai/quotas and the Quota page for your
	// project to set an appropriate value here.
	// If this value is not specified,
	// max_parsing_requests_per_min will be used by indexing
	// pipeline as the global limit.
	GlobalMaxParsingRequestsPerMin int32 `protobuf:"varint,3,opt,name=global_max_parsing_requests_per_min,json=globalMaxParsingRequestsPerMin,proto3" json:"global_max_parsing_requests_per_min,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *RagFileParsingConfig_LayoutParser) Reset() {
	*x = RagFileParsingConfig_LayoutParser{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagFileParsingConfig_LayoutParser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagFileParsingConfig_LayoutParser) ProtoMessage() {}

func (x *RagFileParsingConfig_LayoutParser) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagFileParsingConfig_LayoutParser.ProtoReflect.Descriptor instead.
func (*RagFileParsingConfig_LayoutParser) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{10, 1}
}

func (x *RagFileParsingConfig_LayoutParser) GetProcessorName() string {
	if x != nil {
		return x.ProcessorName
	}
	return ""
}

func (x *RagFileParsingConfig_LayoutParser) GetMaxParsingRequestsPerMin() int32 {
	if x != nil {
		return x.MaxParsingRequestsPerMin
	}
	return 0
}

func (x *RagFileParsingConfig_LayoutParser) GetGlobalMaxParsingRequestsPerMin() int32 {
	if x != nil {
		return x.GlobalMaxParsingRequestsPerMin
	}
	return 0
}

// Specifies the LLM parsing for RagFiles.
type RagFileParsingConfig_LlmParser struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of a LLM model used for parsing.
	// Format:
	// * `projects/{project_id}/locations/{location}/publishers/{publisher}/models/{model}`
	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// The maximum number of requests the job is allowed to make to the
	// LLM model per minute. Consult
	// https://cloud.google.com/vertex-ai/generative-ai/docs/quotas
	// and your document size to set an appropriate value here. If unspecified,
	// a default value of 5000 QPM would be used.
	MaxParsingRequestsPerMin int32 `protobuf:"varint,2,opt,name=max_parsing_requests_per_min,json=maxParsingRequestsPerMin,proto3" json:"max_parsing_requests_per_min,omitempty"`
	// The maximum number of requests the job is allowed to make to the
	// LLM model per minute in this project. Consult
	// https://cloud.google.com/vertex-ai/generative-ai/docs/quotas
	// and your document size to set an appropriate value here.
	// If this value is not specified,
	// max_parsing_requests_per_min will be used by indexing pipeline job as the
	// global limit.
	GlobalMaxParsingRequestsPerMin int32 `protobuf:"varint,4,opt,name=global_max_parsing_requests_per_min,json=globalMaxParsingRequestsPerMin,proto3" json:"global_max_parsing_requests_per_min,omitempty"`
	// The prompt to use for parsing. If not specified, a default prompt will
	// be used.
	CustomParsingPrompt string `protobuf:"bytes,3,opt,name=custom_parsing_prompt,json=customParsingPrompt,proto3" json:"custom_parsing_prompt,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RagFileParsingConfig_LlmParser) Reset() {
	*x = RagFileParsingConfig_LlmParser{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagFileParsingConfig_LlmParser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagFileParsingConfig_LlmParser) ProtoMessage() {}

func (x *RagFileParsingConfig_LlmParser) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagFileParsingConfig_LlmParser.ProtoReflect.Descriptor instead.
func (*RagFileParsingConfig_LlmParser) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{10, 2}
}

func (x *RagFileParsingConfig_LlmParser) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *RagFileParsingConfig_LlmParser) GetMaxParsingRequestsPerMin() int32 {
	if x != nil {
		return x.MaxParsingRequestsPerMin
	}
	return 0
}

func (x *RagFileParsingConfig_LlmParser) GetGlobalMaxParsingRequestsPerMin() int32 {
	if x != nil {
		return x.GlobalMaxParsingRequestsPerMin
	}
	return 0
}

func (x *RagFileParsingConfig_LlmParser) GetCustomParsingPrompt() string {
	if x != nil {
		return x.CustomParsingPrompt
	}
	return ""
}

// Enterprise tier offers production grade performance along with
// autoscaling functionality. It is suitable for customers with large
// amounts of data or performance sensitive workloads.
//
// NOTE: This is the default tier if not explicitly chosen.
type RagManagedDbConfig_Enterprise struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagManagedDbConfig_Enterprise) Reset() {
	*x = RagManagedDbConfig_Enterprise{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagManagedDbConfig_Enterprise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagManagedDbConfig_Enterprise) ProtoMessage() {}

func (x *RagManagedDbConfig_Enterprise) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagManagedDbConfig_Enterprise.ProtoReflect.Descriptor instead.
func (*RagManagedDbConfig_Enterprise) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{13, 0}
}

// Basic tier is a cost-effective and low compute tier suitable for
// the following cases:
// * Experimenting with RagManagedDb.
// * Small data size.
// * Latency insensitive workload.
// * Only using RAG Engine with external vector DBs.
type RagManagedDbConfig_Basic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RagManagedDbConfig_Basic) Reset() {
	*x = RagManagedDbConfig_Basic{}
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RagManagedDbConfig_Basic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagManagedDbConfig_Basic) ProtoMessage() {}

func (x *RagManagedDbConfig_Basic) ProtoReflect() protoreflect.Message {
	mi := &file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagManagedDbConfig_Basic.ProtoReflect.Descriptor instead.
func (*RagManagedDbConfig_Basic) Descriptor() ([]byte, []int) {
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP(), []int{13, 1}
}

var File_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto protoreflect.FileDescriptor

const file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDesc = "" +
	"\n" +
	"1qclaogui/aiplatform/v1beta1/vertex_rag_data.proto\x12\x1bqclaogui.aiplatform.v1beta1\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a*qclaogui/aiplatform/v1beta1/api_auth.proto\x1a1qclaogui/aiplatform/v1beta1/encryption_spec.proto\x1a$qclaogui/aiplatform/v1beta1/io.proto\"\xdb\b\n" +
	"\x17RagEmbeddingModelConfig\x12\x8d\x01\n" +
	"\x1avertex_prediction_endpoint\x18\x01 \x01(\v2M.qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.VertexPredictionEndpointH\x00R\x18vertexPredictionEndpoint\x12{\n" +
	"\x14hybrid_search_config\x18\x02 \x01(\v2G.qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.HybridSearchConfigH\x00R\x12hybridSearchConfig\x1a\xd3\x01\n" +
	"\x18VertexPredictionEndpoint\x12G\n" +
	"\bendpoint\x18\x01 \x01(\tB+\xe2A\x01\x02\xfaA$\n" +
	"\"aiplatform.googleapis.com/EndpointR\bendpoint\x12>\n" +
	"\x05model\x18\x02 \x01(\tB(\xe2A\x01\x03\xfaA!\n" +
	"\x1faiplatform.googleapis.com/ModelR\x05model\x12.\n" +
	"\x10model_version_id\x18\x03 \x01(\tB\x04\xe2A\x01\x03R\x0emodelVersionId\x1a\xfa\x01\n" +
	"\x15SparseEmbeddingConfig\x12e\n" +
	"\x04bm25\x18\x01 \x01(\v2O.qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.SparseEmbeddingConfig.Bm25H\x00R\x04bm25\x1aq\n" +
	"\x04Bm25\x12(\n" +
	"\fmultilingual\x18\x01 \x01(\bB\x04\xe2A\x01\x01R\fmultilingual\x12\x19\n" +
	"\x02k1\x18\x02 \x01(\x02B\x04\xe2A\x01\x01H\x00R\x02k1\x88\x01\x01\x12\x17\n" +
	"\x01b\x18\x03 \x01(\x02B\x04\xe2A\x01\x01H\x01R\x01b\x88\x01\x01B\x05\n" +
	"\x03_k1B\x04\n" +
	"\x02_bB\a\n" +
	"\x05model\x1a\xcf\x02\n" +
	"\x12HybridSearchConfig\x12\x88\x01\n" +
	"\x17sparse_embedding_config\x18\x01 \x01(\v2J.qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.SparseEmbeddingConfigB\x04\xe2A\x01\x01R\x15sparseEmbeddingConfig\x12\xad\x01\n" +
	")dense_embedding_model_prediction_endpoint\x18\x02 \x01(\v2M.qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.VertexPredictionEndpointB\x04\xe2A\x01\x02R%denseEmbeddingModelPredictionEndpointB\x0e\n" +
	"\fmodel_config\"\xa4\n" +
	"\n" +
	"\x11RagVectorDbConfig\x12c\n" +
	"\x0erag_managed_db\x18\x01 \x01(\v2;.qclaogui.aiplatform.v1beta1.RagVectorDbConfig.RagManagedDbH\x00R\fragManagedDb\x12U\n" +
	"\bweaviate\x18\x02 \x01(\v27.qclaogui.aiplatform.v1beta1.RagVectorDbConfig.WeaviateH\x00R\bweaviate\x12U\n" +
	"\bpinecone\x18\x03 \x01(\v27.qclaogui.aiplatform.v1beta1.RagVectorDbConfig.PineconeH\x00R\bpinecone\x12u\n" +
	"\x14vertex_feature_store\x18\x04 \x01(\v2A.qclaogui.aiplatform.v1beta1.RagVectorDbConfig.VertexFeatureStoreH\x00R\x12vertexFeatureStore\x12u\n" +
	"\x14vertex_vector_search\x18\x06 \x01(\v2A.qclaogui.aiplatform.v1beta1.RagVectorDbConfig.VertexVectorSearchH\x00R\x12vertexVectorSearch\x12?\n" +
	"\bapi_auth\x18\x05 \x01(\v2$.qclaogui.aiplatform.v1beta1.ApiAuthR\aapiAuth\x12x\n" +
	"\x1arag_embedding_model_config\x18\a \x01(\v24.qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfigB\x05\xe2A\x02\x01\x05R\x17ragEmbeddingModelConfig\x1a\x9a\x02\n" +
	"\fRagManagedDb\x12S\n" +
	"\x03knn\x18\x01 \x01(\v2?.qclaogui.aiplatform.v1beta1.RagVectorDbConfig.RagManagedDb.KNNH\x00R\x03knn\x12S\n" +
	"\x03ann\x18\x02 \x01(\v2?.qclaogui.aiplatform.v1beta1.RagVectorDbConfig.RagManagedDb.ANNH\x00R\x03ann\x1a\x05\n" +
	"\x03KNN\x1aC\n" +
	"\x03ANN\x12\x1d\n" +
	"\n" +
	"tree_depth\x18\x01 \x01(\x05R\ttreeDepth\x12\x1d\n" +
	"\n" +
	"leaf_count\x18\x02 \x01(\x05R\tleafCountB\x14\n" +
	"\x12retrieval_strategy\x1aX\n" +
	"\bWeaviate\x12#\n" +
	"\rhttp_endpoint\x18\x01 \x01(\tR\fhttpEndpoint\x12'\n" +
	"\x0fcollection_name\x18\x02 \x01(\tR\x0ecollectionName\x1a)\n" +
	"\bPinecone\x12\x1d\n" +
	"\n" +
	"index_name\x18\x01 \x01(\tR\tindexName\x1aQ\n" +
	"\x12VertexFeatureStore\x12;\n" +
	"\x1afeature_view_resource_name\x18\x01 \x01(\tR\x17featureViewResourceName\x1aQ\n" +
	"\x12VertexVectorSearch\x12%\n" +
	"\x0eindex_endpoint\x18\x01 \x01(\tR\rindexEndpoint\x12\x14\n" +
	"\x05index\x18\x02 \x01(\tR\x05indexB\v\n" +
	"\tvector_db\"\xb7\x01\n" +
	"\n" +
	"FileStatus\x12I\n" +
	"\x05state\x18\x01 \x01(\x0e2-.qclaogui.aiplatform.v1beta1.FileStatus.StateB\x04\xe2A\x01\x03R\x05state\x12'\n" +
	"\ferror_status\x18\x02 \x01(\tB\x04\xe2A\x01\x03R\verrorStatus\"5\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x01\x12\t\n" +
	"\x05ERROR\x10\x02\"=\n" +
	"\x14VertexAiSearchConfig\x12%\n" +
	"\x0eserving_config\x18\x01 \x01(\tR\rservingConfig\"\xc2\x01\n" +
	"\fCorpusStatus\x12K\n" +
	"\x05state\x18\x01 \x01(\x0e2/.qclaogui.aiplatform.v1beta1.CorpusStatus.StateB\x04\xe2A\x01\x03R\x05state\x12'\n" +
	"\ferror_status\x18\x02 \x01(\tB\x04\xe2A\x01\x03R\verrorStatus\"<\n" +
	"\x05State\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x0f\n" +
	"\vINITIALIZED\x10\x01\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x02\x12\t\n" +
	"\x05ERROR\x10\x03\"\xb0\f\n" +
	"\tRagCorpus\x12a\n" +
	"\x10vector_db_config\x18\t \x01(\v2..qclaogui.aiplatform.v1beta1.RagVectorDbConfigB\x05\xe2A\x02\x01\x05H\x00R\x0evectorDbConfig\x12q\n" +
	"\x17vertex_ai_search_config\x18\n" +
	" \x01(\v21.qclaogui.aiplatform.v1beta1.VertexAiSearchConfigB\x05\xe2A\x02\x01\x05H\x00R\x14vertexAiSearchConfig\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe2A\x01\x03R\x04name\x12'\n" +
	"\fdisplay_name\x18\x02 \x01(\tB\x04\xe2A\x01\x02R\vdisplayName\x12&\n" +
	"\vdescription\x18\x03 \x01(\tB\x04\xe2A\x01\x01R\vdescription\x12z\n" +
	"\x1arag_embedding_model_config\x18\x06 \x01(\v24.qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfigB\a\xe2A\x02\x01\x05\x18\x01R\x17ragEmbeddingModelConfig\x12h\n" +
	"\x14rag_vector_db_config\x18\a \x01(\v2..qclaogui.aiplatform.v1beta1.RagVectorDbConfigB\a\xe2A\x02\x01\x05\x18\x01R\x11ragVectorDbConfig\x12A\n" +
	"\vcreate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x03R\n" +
	"createTime\x12A\n" +
	"\vupdate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x03R\n" +
	"updateTime\x12T\n" +
	"\rcorpus_status\x18\b \x01(\v2).qclaogui.aiplatform.v1beta1.CorpusStatusB\x04\xe2A\x01\x03R\fcorpusStatus\x12,\n" +
	"\x0frag_files_count\x18\v \x01(\x05B\x04\xe2A\x01\x03R\rragFilesCount\x12[\n" +
	"\x0fencryption_spec\x18\f \x01(\v2+.qclaogui.aiplatform.v1beta1.EncryptionSpecB\x05\xe2A\x02\x05\x01R\x0eencryptionSpec\x12k\n" +
	"\x12corpus_type_config\x18\r \x01(\v27.qclaogui.aiplatform.v1beta1.RagCorpus.CorpusTypeConfigB\x04\xe2A\x01\x01R\x10corpusTypeConfig\x1a\x92\x03\n" +
	"\x10CorpusTypeConfig\x12w\n" +
	"\x0fdocument_corpus\x18\x01 \x01(\v2F.qclaogui.aiplatform.v1beta1.RagCorpus.CorpusTypeConfig.DocumentCorpusB\x04\xe2A\x01\x01H\x00R\x0edocumentCorpus\x12q\n" +
	"\rmemory_corpus\x18\x02 \x01(\v2D.qclaogui.aiplatform.v1beta1.RagCorpus.CorpusTypeConfig.MemoryCorpusB\x04\xe2A\x01\x01H\x00R\fmemoryCorpus\x1a\x10\n" +
	"\x0eDocumentCorpus\x1aj\n" +
	"\fMemoryCorpus\x12Z\n" +
	"\n" +
	"llm_parser\x18\x01 \x01(\v2;.qclaogui.aiplatform.v1beta1.RagFileParsingConfig.LlmParserR\tllmParserB\x14\n" +
	"\x12corpus_type_config:\x80\x01\xeaA}\n" +
	"#aiplatform.googleapis.com/RagCorpus\x12?projects/{project}/locations/{location}/ragCorpora/{rag_corpus}*\n" +
	"ragCorpora2\tragCorpusB\x10\n" +
	"\x0ebackend_config\"\xeb\t\n" +
	"\aRagFile\x12M\n" +
	"\n" +
	"gcs_source\x18\b \x01(\v2&.qclaogui.aiplatform.v1beta1.GcsSourceB\x04\xe2A\x01\x03H\x00R\tgcsSource\x12f\n" +
	"\x13google_drive_source\x18\t \x01(\v2..qclaogui.aiplatform.v1beta1.GoogleDriveSourceB\x04\xe2A\x01\x03H\x00R\x11googleDriveSource\x12i\n" +
	"\x14direct_upload_source\x18\n" +
	" \x01(\v2/.qclaogui.aiplatform.v1beta1.DirectUploadSourceB\x04\xe2A\x01\x03H\x00R\x12directUploadSource\x12M\n" +
	"\fslack_source\x18\v \x01(\v2(.qclaogui.aiplatform.v1beta1.SlackSourceH\x00R\vslackSource\x12J\n" +
	"\vjira_source\x18\f \x01(\v2'.qclaogui.aiplatform.v1beta1.JiraSourceH\x00R\n" +
	"jiraSource\x12`\n" +
	"\x13share_point_sources\x18\x0e \x01(\v2..qclaogui.aiplatform.v1beta1.SharePointSourcesH\x00R\x11sharePointSources\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe2A\x01\x03R\x04name\x12'\n" +
	"\fdisplay_name\x18\x02 \x01(\tB\x04\xe2A\x01\x02R\vdisplayName\x12&\n" +
	"\vdescription\x18\x03 \x01(\tB\x04\xe2A\x01\x01R\vdescription\x12#\n" +
	"\n" +
	"size_bytes\x18\x04 \x01(\x03B\x04\xe2A\x01\x03R\tsizeBytes\x12Z\n" +
	"\rrag_file_type\x18\x05 \x01(\x0e20.qclaogui.aiplatform.v1beta1.RagFile.RagFileTypeB\x04\xe2A\x01\x03R\vragFileType\x12A\n" +
	"\vcreate_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x03R\n" +
	"createTime\x12A\n" +
	"\vupdate_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x03R\n" +
	"updateTime\x12N\n" +
	"\vfile_status\x18\r \x01(\v2'.qclaogui.aiplatform.v1beta1.FileStatusB\x04\xe2A\x01\x03R\n" +
	"fileStatus\"Z\n" +
	"\vRagFileType\x12\x1d\n" +
	"\x19RAG_FILE_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11RAG_FILE_TYPE_TXT\x10\x01\x12\x15\n" +
	"\x11RAG_FILE_TYPE_PDF\x10\x02:\x8f\x01\xeaA\x8b\x01\n" +
	"!aiplatform.googleapis.com/RagFile\x12Sprojects/{project}/locations/{location}/ragCorpora/{rag_corpus}/ragFiles/{rag_file}*\bragFiles2\aragFileB\x11\n" +
	"\x0frag_file_source\"\xc6\x01\n" +
	"\bRagChunk\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12P\n" +
	"\tpage_span\x18\x02 \x01(\v2..qclaogui.aiplatform.v1beta1.RagChunk.PageSpanH\x00R\bpageSpan\x88\x01\x01\x1aF\n" +
	"\bPageSpan\x12\x1d\n" +
	"\n" +
	"first_page\x18\x01 \x01(\x05R\tfirstPage\x12\x1b\n" +
	"\tlast_page\x18\x02 \x01(\x05R\blastPageB\f\n" +
	"\n" +
	"_page_span\"\xcf\x02\n" +
	"\x15RagFileChunkingConfig\x12|\n" +
	"\x15fixed_length_chunking\x18\x03 \x01(\v2F.qclaogui.aiplatform.v1beta1.RagFileChunkingConfig.FixedLengthChunkingH\x00R\x13fixedLengthChunking\x12!\n" +
	"\n" +
	"chunk_size\x18\x01 \x01(\x05B\x02\x18\x01R\tchunkSize\x12'\n" +
	"\rchunk_overlap\x18\x02 \x01(\x05B\x02\x18\x01R\fchunkOverlap\x1aY\n" +
	"\x13FixedLengthChunking\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x01 \x01(\x05R\tchunkSize\x12#\n" +
	"\rchunk_overlap\x18\x02 \x01(\x05R\fchunkOverlapB\x11\n" +
	"\x0fchunking_config\"\x8a\x01\n" +
	"\x1bRagFileTransformationConfig\x12k\n" +
	"\x18rag_file_chunking_config\x18\x01 \x01(\v22.qclaogui.aiplatform.v1beta1.RagFileChunkingConfigR\x15ragFileChunkingConfig\"\x8d\a\n" +
	"\x14RagFileParsingConfig\x12k\n" +
	"\x0fadvanced_parser\x18\x03 \x01(\v2@.qclaogui.aiplatform.v1beta1.RagFileParsingConfig.AdvancedParserH\x00R\x0eadvancedParser\x12e\n" +
	"\rlayout_parser\x18\x04 \x01(\v2>.qclaogui.aiplatform.v1beta1.RagFileParsingConfig.LayoutParserH\x00R\flayoutParser\x12\\\n" +
	"\n" +
	"llm_parser\x18\x05 \x01(\v2;.qclaogui.aiplatform.v1beta1.RagFileParsingConfig.LlmParserH\x00R\tllmParser\x12;\n" +
	"\x18use_advanced_pdf_parsing\x18\x02 \x01(\bB\x02\x18\x01R\x15useAdvancedPdfParsing\x1aI\n" +
	"\x0eAdvancedParser\x127\n" +
	"\x18use_advanced_pdf_parsing\x18\x01 \x01(\bR\x15useAdvancedPdfParsing\x1a\xc2\x01\n" +
	"\fLayoutParser\x12%\n" +
	"\x0eprocessor_name\x18\x01 \x01(\tR\rprocessorName\x12>\n" +
	"\x1cmax_parsing_requests_per_min\x18\x02 \x01(\x05R\x18maxParsingRequestsPerMin\x12K\n" +
	"#global_max_parsing_requests_per_min\x18\x03 \x01(\x05R\x1eglobalMaxParsingRequestsPerMin\x1a\xeb\x01\n" +
	"\tLlmParser\x12\x1d\n" +
	"\n" +
	"model_name\x18\x01 \x01(\tR\tmodelName\x12>\n" +
	"\x1cmax_parsing_requests_per_min\x18\x02 \x01(\x05R\x18maxParsingRequestsPerMin\x12K\n" +
	"#global_max_parsing_requests_per_min\x18\x04 \x01(\x05R\x1eglobalMaxParsingRequestsPerMin\x122\n" +
	"\x15custom_parsing_prompt\x18\x03 \x01(\tR\x13customParsingPromptB\b\n" +
	"\x06parser\"\x85\x02\n" +
	"\x13UploadRagFileConfig\x12o\n" +
	"\x18rag_file_chunking_config\x18\x01 \x01(\v22.qclaogui.aiplatform.v1beta1.RagFileChunkingConfigB\x02\x18\x01R\x15ragFileChunkingConfig\x12}\n" +
	"\x1erag_file_transformation_config\x18\x03 \x01(\v28.qclaogui.aiplatform.v1beta1.RagFileTransformationConfigR\x1bragFileTransformationConfig\"\xe8\v\n" +
	"\x14ImportRagFilesConfig\x12G\n" +
	"\n" +
	"gcs_source\x18\x02 \x01(\v2&.qclaogui.aiplatform.v1beta1.GcsSourceH\x00R\tgcsSource\x12`\n" +
	"\x13google_drive_source\x18\x03 \x01(\v2..qclaogui.aiplatform.v1beta1.GoogleDriveSourceH\x00R\x11googleDriveSource\x12M\n" +
	"\fslack_source\x18\x06 \x01(\v2(.qclaogui.aiplatform.v1beta1.SlackSourceH\x00R\vslackSource\x12J\n" +
	"\vjira_source\x18\a \x01(\v2'.qclaogui.aiplatform.v1beta1.JiraSourceH\x00R\n" +
	"jiraSource\x12`\n" +
	"\x13share_point_sources\x18\r \x01(\v2..qclaogui.aiplatform.v1beta1.SharePointSourcesH\x00R\x11sharePointSources\x12j\n" +
	"\x18partial_failure_gcs_sink\x18\v \x01(\v2+.qclaogui.aiplatform.v1beta1.GcsDestinationB\x02\x18\x01H\x01R\x15partialFailureGcsSink\x12y\n" +
	"\x1dpartial_failure_bigquery_sink\x18\f \x01(\v20.qclaogui.aiplatform.v1beta1.BigQueryDestinationB\x02\x18\x01H\x01R\x1apartialFailureBigquerySink\x12b\n" +
	"\x16import_result_gcs_sink\x18\x0e \x01(\v2+.qclaogui.aiplatform.v1beta1.GcsDestinationH\x02R\x13importResultGcsSink\x12q\n" +
	"\x1bimport_result_bigquery_sink\x18\x0f \x01(\v20.qclaogui.aiplatform.v1beta1.BigQueryDestinationH\x02R\x18importResultBigquerySink\x12o\n" +
	"\x18rag_file_chunking_config\x18\x04 \x01(\v22.qclaogui.aiplatform.v1beta1.RagFileChunkingConfigB\x02\x18\x01R\x15ragFileChunkingConfig\x12}\n" +
	"\x1erag_file_transformation_config\x18\x10 \x01(\v28.qclaogui.aiplatform.v1beta1.RagFileTransformationConfigR\x1bragFileTransformationConfig\x12n\n" +
	"\x17rag_file_parsing_config\x18\b \x01(\v21.qclaogui.aiplatform.v1beta1.RagFileParsingConfigB\x04\xe2A\x01\x01R\x14ragFileParsingConfig\x12H\n" +
	"\x1emax_embedding_requests_per_min\x18\x05 \x01(\x05B\x04\xe2A\x01\x01R\x1amaxEmbeddingRequestsPerMin\x12U\n" +
	"%global_max_embedding_requests_per_min\x18\x12 \x01(\x05B\x04\xe2A\x01\x01R globalMaxEmbeddingRequestsPerMin\x12*\n" +
	"\x11rebuild_ann_index\x18\x13 \x01(\bR\x0frebuildAnnIndexB\x0f\n" +
	"\rimport_sourceB\x16\n" +
	"\x14partial_failure_sinkB\x14\n" +
	"\x12import_result_sink\"\xe0\x01\n" +
	"\x12RagManagedDbConfig\x12\\\n" +
	"\n" +
	"enterprise\x18\x01 \x01(\v2:.qclaogui.aiplatform.v1beta1.RagManagedDbConfig.EnterpriseH\x00R\n" +
	"enterprise\x12M\n" +
	"\x05basic\x18\x02 \x01(\v25.qclaogui.aiplatform.v1beta1.RagManagedDbConfig.BasicH\x00R\x05basic\x1a\f\n" +
	"\n" +
	"Enterprise\x1a\a\n" +
	"\x05BasicB\x06\n" +
	"\x04tier\"\x9d\x02\n" +
	"\x0fRagEngineConfig\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe2A\x01\bR\x04name\x12b\n" +
	"\x15rag_managed_db_config\x18\x02 \x01(\v2/.qclaogui.aiplatform.v1beta1.RagManagedDbConfigR\x12ragManagedDbConfig:\x8b\x01\xeaA\x87\x01\n" +
	")aiplatform.googleapis.com/RagEngineConfig\x127projects/{project}/locations/{location}/ragEngineConfig*\x10ragEngineConfigs2\x0fragEngineConfigBSZQgithub.com/qclaogui/gaip/genproto/aiplatform/apiv1beta1/aiplatformpb;aiplatformpbb\x06proto3"

var (
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescOnce sync.Once
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescData []byte
)

func file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescGZIP() []byte {
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescOnce.Do(func() {
		file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDesc), len(file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDesc)))
	})
	return file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDescData
}

var (
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes  = make([]protoimpl.MessageInfo, 36)
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_goTypes   = []any{
		(FileStatus_State)(0),                                      // 0: qclaogui.aiplatform.v1beta1.FileStatus.State
		(CorpusStatus_State)(0),                                    // 1: qclaogui.aiplatform.v1beta1.CorpusStatus.State
		(RagFile_RagFileType)(0),                                   // 2: qclaogui.aiplatform.v1beta1.RagFile.RagFileType
		(*RagEmbeddingModelConfig)(nil),                            // 3: qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig
		(*RagVectorDbConfig)(nil),                                  // 4: qclaogui.aiplatform.v1beta1.RagVectorDbConfig
		(*FileStatus)(nil),                                         // 5: qclaogui.aiplatform.v1beta1.FileStatus
		(*VertexAiSearchConfig)(nil),                               // 6: qclaogui.aiplatform.v1beta1.VertexAiSearchConfig
		(*CorpusStatus)(nil),                                       // 7: qclaogui.aiplatform.v1beta1.CorpusStatus
		(*RagCorpus)(nil),                                          // 8: qclaogui.aiplatform.v1beta1.RagCorpus
		(*RagFile)(nil),                                            // 9: qclaogui.aiplatform.v1beta1.RagFile
		(*RagChunk)(nil),                                           // 10: qclaogui.aiplatform.v1beta1.RagChunk
		(*RagFileChunkingConfig)(nil),                              // 11: qclaogui.aiplatform.v1beta1.RagFileChunkingConfig
		(*RagFileTransformationConfig)(nil),                        // 12: qclaogui.aiplatform.v1beta1.RagFileTransformationConfig
		(*RagFileParsingConfig)(nil),                               // 13: qclaogui.aiplatform.v1beta1.RagFileParsingConfig
		(*UploadRagFileConfig)(nil),                                // 14: qclaogui.aiplatform.v1beta1.UploadRagFileConfig
		(*ImportRagFilesConfig)(nil),                               // 15: qclaogui.aiplatform.v1beta1.ImportRagFilesConfig
		(*RagManagedDbConfig)(nil),                                 // 16: qclaogui.aiplatform.v1beta1.RagManagedDbConfig
		(*RagEngineConfig)(nil),                                    // 17: qclaogui.aiplatform.v1beta1.RagEngineConfig
		(*RagEmbeddingModelConfig_VertexPredictionEndpoint)(nil),   // 18: qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.VertexPredictionEndpoint
		(*RagEmbeddingModelConfig_SparseEmbeddingConfig)(nil),      // 19: qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.SparseEmbeddingConfig
		(*RagEmbeddingModelConfig_HybridSearchConfig)(nil),         // 20: qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.HybridSearchConfig
		(*RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25)(nil), // 21: qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.SparseEmbeddingConfig.Bm25
		(*RagVectorDbConfig_RagManagedDb)(nil),                     // 22: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.RagManagedDb
		(*RagVectorDbConfig_Weaviate)(nil),                         // 23: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.Weaviate
		(*RagVectorDbConfig_Pinecone)(nil),                         // 24: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.Pinecone
		(*RagVectorDbConfig_VertexFeatureStore)(nil),               // 25: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.VertexFeatureStore
		(*RagVectorDbConfig_VertexVectorSearch)(nil),               // 26: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.VertexVectorSearch
		(*RagVectorDbConfig_RagManagedDb_KNN)(nil),                 // 27: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.RagManagedDb.KNN
		(*RagVectorDbConfig_RagManagedDb_ANN)(nil),                 // 28: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.RagManagedDb.ANN
		(*RagCorpus_CorpusTypeConfig)(nil),                         // 29: qclaogui.aiplatform.v1beta1.RagCorpus.CorpusTypeConfig
		(*RagCorpus_CorpusTypeConfig_DocumentCorpus)(nil),          // 30: qclaogui.aiplatform.v1beta1.RagCorpus.CorpusTypeConfig.DocumentCorpus
		(*RagCorpus_CorpusTypeConfig_MemoryCorpus)(nil),            // 31: qclaogui.aiplatform.v1beta1.RagCorpus.CorpusTypeConfig.MemoryCorpus
		(*RagChunk_PageSpan)(nil),                                  // 32: qclaogui.aiplatform.v1beta1.RagChunk.PageSpan
		(*RagFileChunkingConfig_FixedLengthChunking)(nil),          // 33: qclaogui.aiplatform.v1beta1.RagFileChunkingConfig.FixedLengthChunking
		(*RagFileParsingConfig_AdvancedParser)(nil),                // 34: qclaogui.aiplatform.v1beta1.RagFileParsingConfig.AdvancedParser
		(*RagFileParsingConfig_LayoutParser)(nil),                  // 35: qclaogui.aiplatform.v1beta1.RagFileParsingConfig.LayoutParser
		(*RagFileParsingConfig_LlmParser)(nil),                     // 36: qclaogui.aiplatform.v1beta1.RagFileParsingConfig.LlmParser
		(*RagManagedDbConfig_Enterprise)(nil),                      // 37: qclaogui.aiplatform.v1beta1.RagManagedDbConfig.Enterprise
		(*RagManagedDbConfig_Basic)(nil),                           // 38: qclaogui.aiplatform.v1beta1.RagManagedDbConfig.Basic
		(*ApiAuth)(nil),                                            // 39: qclaogui.aiplatform.v1beta1.ApiAuth
		(*timestamppb.Timestamp)(nil),                              // 40: google.protobuf.Timestamp
		(*EncryptionSpec)(nil),                                     // 41: qclaogui.aiplatform.v1beta1.EncryptionSpec
		(*GcsSource)(nil),                                          // 42: qclaogui.aiplatform.v1beta1.GcsSource
		(*GoogleDriveSource)(nil),                                  // 43: qclaogui.aiplatform.v1beta1.GoogleDriveSource
		(*DirectUploadSource)(nil),                                 // 44: qclaogui.aiplatform.v1beta1.DirectUploadSource
		(*SlackSource)(nil),                                        // 45: qclaogui.aiplatform.v1beta1.SlackSource
		(*JiraSource)(nil),                                         // 46: qclaogui.aiplatform.v1beta1.JiraSource
		(*SharePointSources)(nil),                                  // 47: qclaogui.aiplatform.v1beta1.SharePointSources
		(*GcsDestination)(nil),                                     // 48: qclaogui.aiplatform.v1beta1.GcsDestination
		(*BigQueryDestination)(nil),                                // 49: qclaogui.aiplatform.v1beta1.BigQueryDestination
	}
)

var file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_depIdxs = []int32{
	18, // 0: qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.vertex_prediction_endpoint:type_name -> qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.VertexPredictionEndpoint
	20, // 1: qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.hybrid_search_config:type_name -> qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.HybridSearchConfig
	22, // 2: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.rag_managed_db:type_name -> qclaogui.aiplatform.v1beta1.RagVectorDbConfig.RagManagedDb
	23, // 3: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.weaviate:type_name -> qclaogui.aiplatform.v1beta1.RagVectorDbConfig.Weaviate
	24, // 4: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.pinecone:type_name -> qclaogui.aiplatform.v1beta1.RagVectorDbConfig.Pinecone
	25, // 5: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.vertex_feature_store:type_name -> qclaogui.aiplatform.v1beta1.RagVectorDbConfig.VertexFeatureStore
	26, // 6: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.vertex_vector_search:type_name -> qclaogui.aiplatform.v1beta1.RagVectorDbConfig.VertexVectorSearch
	39, // 7: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.api_auth:type_name -> qclaogui.aiplatform.v1beta1.ApiAuth
	3,  // 8: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.rag_embedding_model_config:type_name -> qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig
	0,  // 9: qclaogui.aiplatform.v1beta1.FileStatus.state:type_name -> qclaogui.aiplatform.v1beta1.FileStatus.State
	1,  // 10: qclaogui.aiplatform.v1beta1.CorpusStatus.state:type_name -> qclaogui.aiplatform.v1beta1.CorpusStatus.State
	4,  // 11: qclaogui.aiplatform.v1beta1.RagCorpus.vector_db_config:type_name -> qclaogui.aiplatform.v1beta1.RagVectorDbConfig
	6,  // 12: qclaogui.aiplatform.v1beta1.RagCorpus.vertex_ai_search_config:type_name -> qclaogui.aiplatform.v1beta1.VertexAiSearchConfig
	3,  // 13: qclaogui.aiplatform.v1beta1.RagCorpus.rag_embedding_model_config:type_name -> qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig
	4,  // 14: qclaogui.aiplatform.v1beta1.RagCorpus.rag_vector_db_config:type_name -> qclaogui.aiplatform.v1beta1.RagVectorDbConfig
	40, // 15: qclaogui.aiplatform.v1beta1.RagCorpus.create_time:type_name -> google.protobuf.Timestamp
	40, // 16: qclaogui.aiplatform.v1beta1.RagCorpus.update_time:type_name -> google.protobuf.Timestamp
	7,  // 17: qclaogui.aiplatform.v1beta1.RagCorpus.corpus_status:type_name -> qclaogui.aiplatform.v1beta1.CorpusStatus
	41, // 18: qclaogui.aiplatform.v1beta1.RagCorpus.encryption_spec:type_name -> qclaogui.aiplatform.v1beta1.EncryptionSpec
	29, // 19: qclaogui.aiplatform.v1beta1.RagCorpus.corpus_type_config:type_name -> qclaogui.aiplatform.v1beta1.RagCorpus.CorpusTypeConfig
	42, // 20: qclaogui.aiplatform.v1beta1.RagFile.gcs_source:type_name -> qclaogui.aiplatform.v1beta1.GcsSource
	43, // 21: qclaogui.aiplatform.v1beta1.RagFile.google_drive_source:type_name -> qclaogui.aiplatform.v1beta1.GoogleDriveSource
	44, // 22: qclaogui.aiplatform.v1beta1.RagFile.direct_upload_source:type_name -> qclaogui.aiplatform.v1beta1.DirectUploadSource
	45, // 23: qclaogui.aiplatform.v1beta1.RagFile.slack_source:type_name -> qclaogui.aiplatform.v1beta1.SlackSource
	46, // 24: qclaogui.aiplatform.v1beta1.RagFile.jira_source:type_name -> qclaogui.aiplatform.v1beta1.JiraSource
	47, // 25: qclaogui.aiplatform.v1beta1.RagFile.share_point_sources:type_name -> qclaogui.aiplatform.v1beta1.SharePointSources
	2,  // 26: qclaogui.aiplatform.v1beta1.RagFile.rag_file_type:type_name -> qclaogui.aiplatform.v1beta1.RagFile.RagFileType
	40, // 27: qclaogui.aiplatform.v1beta1.RagFile.create_time:type_name -> google.protobuf.Timestamp
	40, // 28: qclaogui.aiplatform.v1beta1.RagFile.update_time:type_name -> google.protobuf.Timestamp
	5,  // 29: qclaogui.aiplatform.v1beta1.RagFile.file_status:type_name -> qclaogui.aiplatform.v1beta1.FileStatus
	32, // 30: qclaogui.aiplatform.v1beta1.RagChunk.page_span:type_name -> qclaogui.aiplatform.v1beta1.RagChunk.PageSpan
	33, // 31: qclaogui.aiplatform.v1beta1.RagFileChunkingConfig.fixed_length_chunking:type_name -> qclaogui.aiplatform.v1beta1.RagFileChunkingConfig.FixedLengthChunking
	11, // 32: qclaogui.aiplatform.v1beta1.RagFileTransformationConfig.rag_file_chunking_config:type_name -> qclaogui.aiplatform.v1beta1.RagFileChunkingConfig
	34, // 33: qclaogui.aiplatform.v1beta1.RagFileParsingConfig.advanced_parser:type_name -> qclaogui.aiplatform.v1beta1.RagFileParsingConfig.AdvancedParser
	35, // 34: qclaogui.aiplatform.v1beta1.RagFileParsingConfig.layout_parser:type_name -> qclaogui.aiplatform.v1beta1.RagFileParsingConfig.LayoutParser
	36, // 35: qclaogui.aiplatform.v1beta1.RagFileParsingConfig.llm_parser:type_name -> qclaogui.aiplatform.v1beta1.RagFileParsingConfig.LlmParser
	11, // 36: qclaogui.aiplatform.v1beta1.UploadRagFileConfig.rag_file_chunking_config:type_name -> qclaogui.aiplatform.v1beta1.RagFileChunkingConfig
	12, // 37: qclaogui.aiplatform.v1beta1.UploadRagFileConfig.rag_file_transformation_config:type_name -> qclaogui.aiplatform.v1beta1.RagFileTransformationConfig
	42, // 38: qclaogui.aiplatform.v1beta1.ImportRagFilesConfig.gcs_source:type_name -> qclaogui.aiplatform.v1beta1.GcsSource
	43, // 39: qclaogui.aiplatform.v1beta1.ImportRagFilesConfig.google_drive_source:type_name -> qclaogui.aiplatform.v1beta1.GoogleDriveSource
	45, // 40: qclaogui.aiplatform.v1beta1.ImportRagFilesConfig.slack_source:type_name -> qclaogui.aiplatform.v1beta1.SlackSource
	46, // 41: qclaogui.aiplatform.v1beta1.ImportRagFilesConfig.jira_source:type_name -> qclaogui.aiplatform.v1beta1.JiraSource
	47, // 42: qclaogui.aiplatform.v1beta1.ImportRagFilesConfig.share_point_sources:type_name -> qclaogui.aiplatform.v1beta1.SharePointSources
	48, // 43: qclaogui.aiplatform.v1beta1.ImportRagFilesConfig.partial_failure_gcs_sink:type_name -> qclaogui.aiplatform.v1beta1.GcsDestination
	49, // 44: qclaogui.aiplatform.v1beta1.ImportRagFilesConfig.partial_failure_bigquery_sink:type_name -> qclaogui.aiplatform.v1beta1.BigQueryDestination
	48, // 45: qclaogui.aiplatform.v1beta1.ImportRagFilesConfig.import_result_gcs_sink:type_name -> qclaogui.aiplatform.v1beta1.GcsDestination
	49, // 46: qclaogui.aiplatform.v1beta1.ImportRagFilesConfig.import_result_bigquery_sink:type_name -> qclaogui.aiplatform.v1beta1.BigQueryDestination
	11, // 47: qclaogui.aiplatform.v1beta1.ImportRagFilesConfig.rag_file_chunking_config:type_name -> qclaogui.aiplatform.v1beta1.RagFileChunkingConfig
	12, // 48: qclaogui.aiplatform.v1beta1.ImportRagFilesConfig.rag_file_transformation_config:type_name -> qclaogui.aiplatform.v1beta1.RagFileTransformationConfig
	13, // 49: qclaogui.aiplatform.v1beta1.ImportRagFilesConfig.rag_file_parsing_config:type_name -> qclaogui.aiplatform.v1beta1.RagFileParsingConfig
	37, // 50: qclaogui.aiplatform.v1beta1.RagManagedDbConfig.enterprise:type_name -> qclaogui.aiplatform.v1beta1.RagManagedDbConfig.Enterprise
	38, // 51: qclaogui.aiplatform.v1beta1.RagManagedDbConfig.basic:type_name -> qclaogui.aiplatform.v1beta1.RagManagedDbConfig.Basic
	16, // 52: qclaogui.aiplatform.v1beta1.RagEngineConfig.rag_managed_db_config:type_name -> qclaogui.aiplatform.v1beta1.RagManagedDbConfig
	21, // 53: qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.SparseEmbeddingConfig.bm25:type_name -> qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.SparseEmbeddingConfig.Bm25
	19, // 54: qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.HybridSearchConfig.sparse_embedding_config:type_name -> qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.SparseEmbeddingConfig
	18, // 55: qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.HybridSearchConfig.dense_embedding_model_prediction_endpoint:type_name -> qclaogui.aiplatform.v1beta1.RagEmbeddingModelConfig.VertexPredictionEndpoint
	27, // 56: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.RagManagedDb.knn:type_name -> qclaogui.aiplatform.v1beta1.RagVectorDbConfig.RagManagedDb.KNN
	28, // 57: qclaogui.aiplatform.v1beta1.RagVectorDbConfig.RagManagedDb.ann:type_name -> qclaogui.aiplatform.v1beta1.RagVectorDbConfig.RagManagedDb.ANN
	30, // 58: qclaogui.aiplatform.v1beta1.RagCorpus.CorpusTypeConfig.document_corpus:type_name -> qclaogui.aiplatform.v1beta1.RagCorpus.CorpusTypeConfig.DocumentCorpus
	31, // 59: qclaogui.aiplatform.v1beta1.RagCorpus.CorpusTypeConfig.memory_corpus:type_name -> qclaogui.aiplatform.v1beta1.RagCorpus.CorpusTypeConfig.MemoryCorpus
	36, // 60: qclaogui.aiplatform.v1beta1.RagCorpus.CorpusTypeConfig.MemoryCorpus.llm_parser:type_name -> qclaogui.aiplatform.v1beta1.RagFileParsingConfig.LlmParser
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_init() }
func file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_init() {
	if File_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto != nil {
		return
	}
	file_qclaogui_aiplatform_v1beta1_api_auth_proto_init()
	file_qclaogui_aiplatform_v1beta1_encryption_spec_proto_init()
	file_qclaogui_aiplatform_v1beta1_io_proto_init()
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[0].OneofWrappers = []any{
		(*RagEmbeddingModelConfig_VertexPredictionEndpoint_)(nil),
		(*RagEmbeddingModelConfig_HybridSearchConfig_)(nil),
	}
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[1].OneofWrappers = []any{
		(*RagVectorDbConfig_RagManagedDb_)(nil),
		(*RagVectorDbConfig_Weaviate_)(nil),
		(*RagVectorDbConfig_Pinecone_)(nil),
		(*RagVectorDbConfig_VertexFeatureStore_)(nil),
		(*RagVectorDbConfig_VertexVectorSearch_)(nil),
	}
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[5].OneofWrappers = []any{
		(*RagCorpus_VectorDbConfig)(nil),
		(*RagCorpus_VertexAiSearchConfig)(nil),
	}
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[6].OneofWrappers = []any{
		(*RagFile_GcsSource)(nil),
		(*RagFile_GoogleDriveSource)(nil),
		(*RagFile_DirectUploadSource)(nil),
		(*RagFile_SlackSource)(nil),
		(*RagFile_JiraSource)(nil),
		(*RagFile_SharePointSources)(nil),
	}
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[7].OneofWrappers = []any{}
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[8].OneofWrappers = []any{
		(*RagFileChunkingConfig_FixedLengthChunking_)(nil),
	}
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[10].OneofWrappers = []any{
		(*RagFileParsingConfig_AdvancedParser_)(nil),
		(*RagFileParsingConfig_LayoutParser_)(nil),
		(*RagFileParsingConfig_LlmParser_)(nil),
	}
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[12].OneofWrappers = []any{
		(*ImportRagFilesConfig_GcsSource)(nil),
		(*ImportRagFilesConfig_GoogleDriveSource)(nil),
		(*ImportRagFilesConfig_SlackSource)(nil),
		(*ImportRagFilesConfig_JiraSource)(nil),
		(*ImportRagFilesConfig_SharePointSources)(nil),
		(*ImportRagFilesConfig_PartialFailureGcsSink)(nil),
		(*ImportRagFilesConfig_PartialFailureBigquerySink)(nil),
		(*ImportRagFilesConfig_ImportResultGcsSink)(nil),
		(*ImportRagFilesConfig_ImportResultBigquerySink)(nil),
	}
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[13].OneofWrappers = []any{
		(*RagManagedDbConfig_Enterprise_)(nil),
		(*RagManagedDbConfig_Basic_)(nil),
	}
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[16].OneofWrappers = []any{
		(*RagEmbeddingModelConfig_SparseEmbeddingConfig_Bm25_)(nil),
	}
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[18].OneofWrappers = []any{}
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[19].OneofWrappers = []any{
		(*RagVectorDbConfig_RagManagedDb_Knn)(nil),
		(*RagVectorDbConfig_RagManagedDb_Ann)(nil),
	}
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes[26].OneofWrappers = []any{
		(*RagCorpus_CorpusTypeConfig_DocumentCorpus_)(nil),
		(*RagCorpus_CorpusTypeConfig_MemoryCorpus_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDesc), len(file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_goTypes,
		DependencyIndexes: file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_depIdxs,
		EnumInfos:         file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_enumTypes,
		MessageInfos:      file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_msgTypes,
	}.Build()
	File_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto = out.File
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_goTypes = nil
	file_qclaogui_aiplatform_v1beta1_vertex_rag_data_proto_depIdxs = nil
}
